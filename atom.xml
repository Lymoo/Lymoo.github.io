<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lymoo&#39;s Blog</title>
  <subtitle>www.lymooz.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-08T08:13:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lymoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些前端面试题的整理</title>
    <link href="http://yoursite.com/2017/04/08/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9A%84%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/04/08/一些前端面试题的整理/</id>
    <published>2017-04-08T07:23:33.000Z</published>
    <updated>2017-04-08T08:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人整理的一些最近碰到的一些较为有用的前端题目<a id="more"></a></p>
<h1 id="标签属性中title和alt的区别"><a href="#标签属性中title和alt的区别" class="headerlink" title="标签属性中title和alt的区别"></a>标签属性中title和alt的区别</h1><p>答:title是设置鼠标移动到图片上时显示的内容，而alt是用于当图片没有正常显示时出现的提示文字，另外alt还用于在seo中针对图片的优化说明.</p>
<h1 id="隐藏元素的几种方法"><a href="#隐藏元素的几种方法" class="headerlink" title="隐藏元素的几种方法"></a>隐藏元素的几种方法</h1><p>答: 1.display:none;<br>2.visibility:hidden;<br>3.opacity:0;<br>4.position:absolute;<br>left:-10000px;</p>
<h1 id="JavaScript中有哪几种数据类型"><a href="#JavaScript中有哪几种数据类型" class="headerlink" title="JavaScript中有哪几种数据类型"></a>JavaScript中有哪几种数据类型</h1><p>答:JavaScript中有5种简单数据类型（也称为基本数据类型）:Undefined、Null、Boolean、Number和String。还有1种复杂数据类型——Object，Object本质上是由一组无序的名值对组成的</p>
<h1 id="回答以下输出的类型"><a href="#回答以下输出的类型" class="headerlink" title="回答以下输出的类型"></a>回答以下输出的类型</h1><p>答:alert(typeof(null));//object<br>alert(typeof(NaN));//number<br>alert(typeof(undefined));//undefined<br>alert(typeof(“undefined”));//string<br>alert(NaN == undefined);//false<br>alert(NaN == NaN);//false</p>
<h1 id="用jquery和原生js获取元素中的内容"><a href="#用jquery和原生js获取元素中的内容" class="headerlink" title="用jquery和原生js获取元素中的内容"></a>用jquery和原生js获取元素中的内容</h1><p>答:JS:document.getElementById(“div1”).innerHTML;<br>document.querySelector(“#div1”).innerText;<br>JQ:$(“#div1”).html()</p>
<h1 id="用原生js封装一个添加监听事件的兼容写法"><a href="#用原生js封装一个添加监听事件的兼容写法" class="headerlink" title="用原生js封装一个添加监听事件的兼容写法"></a>用原生js封装一个添加监听事件的兼容写法</h1><p>答:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">obj,event,fn</span>)</span>&#123;</div><div class="line">	<span class="comment">//现代：addEventLister 不用加on</span></div><div class="line">	<span class="comment">//ie：touchEvent 需要加on</span></div><div class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener)&#123;</div><div class="line">		obj.addEventListener(event,fn);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		obj.attachEvent(<span class="string">"on"</span>+event, fn);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="对跨域的理解和解决办法"><a href="#对跨域的理解和解决办法" class="headerlink" title="对跨域的理解和解决办法"></a>对跨域的理解和解决办法</h1><p>答:跨域简单的理解即为当前服务器目录下的前端需求要请求非本服务器(本域名)下的后台服务就称为跨域请求。跨域请求我们使用普通的ajax请求是无法进行的同源策略，一般来说位于 server1.example.com 的网页无法与不是 server2.example.com的服务器沟通，或者说如果在server1.example.com下想获取server2.example.com的话就得用跨域请求。<br>跨域的解决方法及解决：通过script标签请求，或者通过jQuery跨域</p>
<h1 id="Ajax的原理"><a href="#Ajax的原理" class="headerlink" title="Ajax的原理"></a>Ajax的原理</h1><p>答:Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>
<h1 id="jQuery库中的-是什么"><a href="#jQuery库中的-是什么" class="headerlink" title="jQuery库中的$()是什么"></a>jQuery库中的$()是什么</h1><p>答:$()函数用于将任何对象包裹成jQuery对象，接着你就被允许调用定义在 jQuery对象上的多个不同方法。你甚至可以将一个选择器字符串传入$()函数，它会返回一个包含所有匹配的DOM元素数组的jQuery对象。</p>
<h1 id="JavaScript的window-onload事件和jQuery的ready函数有何不同"><a href="#JavaScript的window-onload事件和jQuery的ready函数有何不同" class="headerlink" title="JavaScript的window.onload事件和jQuery的ready函数有何不同"></a>JavaScript的window.onload事件和jQuery的ready函数有何不同</h1><p>答:JavaScript的window.onload事件和jQuery的ready函数之间的主要区别是，前者除了要等待DOM被创建还要等到包括大型图片、音频、视频在内的所有外部资源都完全加载。如果加载图片和媒体内容花费了大量时间，用户就会感受到定义在window.onload 事件上的代码在执行时有明显的延迟。<br>另一方面，jQuery的ready()函数只需对DOM树的等待，而无需对图像或外部资源加载的等待，从而执行起来更快。使用jQuery $(document).ready()的另一个优势是你可以在网页里多次使用它，浏览器会按它们在HTML页面里出现的顺序执行它们，相反对于onload技术而言，只能在单一函数里使用。鉴于这个好处，用jQuery的ready()函数比用JavaScript的window.onload 事件要更好些。</p>
<h1 id="用原生js封装一个能获取元素到页面最上方和最左侧的函数，再用JQ封装一个同样的函数"><a href="#用原生js封装一个能获取元素到页面最上方和最左侧的函数，再用JQ封装一个同样的函数" class="headerlink" title="用原生js封装一个能获取元素到页面最上方和最左侧的函数，再用JQ封装一个同样的函数"></a>用原生js封装一个能获取元素到页面最上方和最左侧的函数，再用JQ封装一个同样的函数</h1><p>答:原生:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">offset</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> l = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> t = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(obj)&#123;</div><div class="line">		l+=obj.offsetLeft;</div><div class="line">		t+=obj.offsetTop;</div><div class="line">		obj = obj.offsetParent;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;<span class="attr">left</span>:l,<span class="attr">top</span>:t&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery：<code>$().offset().left;$().offset().top</code></p>
<h1 id="如何实现一个EventEmitter"><a href="#如何实现一个EventEmitter" class="headerlink" title="如何实现一个EventEmitter"></a>如何实现一个EventEmitter</h1><p>答:主要分三步：定义一个子类，调用构造函数，继承EventEmitter<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyEmitter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    EventEmitter.call(<span class="keyword">this</span>);</div><div class="line">&#125; <span class="comment">// 构造函数</span></div><div class="line">util.inherits(MyEmitter, EventEmitter); <span class="comment">// 继承</span></div><div class="line"><span class="keyword">var</span> em = <span class="keyword">new</span> MyEmitter();</div><div class="line">em.on(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'收到事件hello的数据:'</span>, data);</div><div class="line">&#125;); <span class="comment">// 接收事件，并打印到控制台</span></div><div class="line">em.emit(<span class="string">'hello'</span>, <span class="string">'EventEmitter传递消息真方便!'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="如何通过stream实现一个文件的复制"><a href="#如何通过stream实现一个文件的复制" class="headerlink" title="如何通过stream实现一个文件的复制"></a>如何通过stream实现一个文件的复制</h1><p>答:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var fs = require("fs");</div><div class="line">var rs = fs.createReadStream(“1.jpg");</div><div class="line">var ws = fs.createWriteStream("2.jpg");</div><div class="line">rs.pipe(ws);</div></pre></td></tr></table></figure></p>
<h1 id="如何理解node的同步和异步"><a href="#如何理解node的同步和异步" class="headerlink" title="如何理解node的同步和异步"></a>如何理解node的同步和异步</h1><p>答:”同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>
<h1 id="使用node构建一个服务器并对向”-post”发起的post请求进行处理，要求拿到post请求传输的数据（不包括文件上传）"><a href="#使用node构建一个服务器并对向”-post”发起的post请求进行处理，要求拿到post请求传输的数据（不包括文件上传）" class="headerlink" title="使用node构建一个服务器并对向”/post”发起的post请求进行处理，要求拿到post请求传输的数据（不包括文件上传）"></a>使用node构建一个服务器并对向”/post”发起的post请求进行处理，要求拿到post请求传输的数据（不包括文件上传）</h1><p>答:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> queryString = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(urlObj.pathname == <span class="string">"/post"</span>)&#123;</div><div class="line">          <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">       req.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">             str+=chunk;</div><div class="line">         &#125;);</div><div class="line">         req.on(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">               <span class="keyword">var</span> query = queryString.parse(str);</div><div class="line">              <span class="built_in">console</span>.log(query);</div><div class="line">         &#125;)</div><div class="line">       res.end(<span class="string">"你请求的地址是"</span>+urlObj.pathname);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<h1 id="用node模拟客户端发起请求"><a href="#用node模拟客户端发起请求" class="headerlink" title="用node模拟客户端发起请求"></a>用node模拟客户端发起请求</h1><p>答:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> request = http.request(&#123;</div><div class="line">    <span class="attr">host</span>:<span class="string">"localhost"</span>,</div><div class="line">    <span class="attr">port</span>:<span class="string">"8080"</span>,</div><div class="line">    <span class="attr">path</span>:<span class="string">"/request"</span>,</div><div class="line">    <span class="attr">method</span>:<span class="string">"post"</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    res.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(chunk.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">request.write(<span class="string">"user=zhang&amp;pass=111"</span>);</div><div class="line">request.end(<span class="string">"请求结束"</span>);<span class="comment">//结束本次请求</span></div></pre></td></tr></table></figure></p>
<h1 id="图片预加载的意义和原理"><a href="#图片预加载的意义和原理" class="headerlink" title="图片预加载的意义和原理"></a>图片预加载的意义和原理</h1><p>答:预加载图片是提高用户体验的一个很好方法。图片预先加载到浏览器中，这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览网站内容时获得更好的用户体验。<br>实例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//obj.imgArr 图片数组</span></div><div class="line"><span class="comment">//obj.loadingProgress 加载进度</span></div><div class="line"><span class="comment">//obj.loadingOver 加载结果</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> imgObjs = [];</div><div class="line">	loadingFn = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> index = <span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.imgArr.length; i++) &#123;</div><div class="line">			<span class="keyword">var</span> imgObj = <span class="keyword">new</span> Image();</div><div class="line">			imgObj.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				index++;</div><div class="line">				imgObjs.push(<span class="keyword">this</span>);</div><div class="line">				<span class="keyword">if</span> (obj.loadingProgress)&#123;</div><div class="line">					obj.loadingProgress(index, <span class="keyword">this</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (index &gt; obj.imgArr.length<span class="number">-1</span>)&#123;</div><div class="line">					obj.loadingOver(imgObjs);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			imgObj.src = obj.imgArr[i];</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(obj);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h1 id="浏览器页面有哪三层构成，分别是什么，作用是什么"><a href="#浏览器页面有哪三层构成，分别是什么，作用是什么" class="headerlink" title="浏览器页面有哪三层构成，分别是什么，作用是什么?"></a>浏览器页面有哪三层构成，分别是什么，作用是什么?</h1><p>答:浏览器页面构成：结构层、表示层、行为层<br>分别是：HTML、CSS、JavaScript<br>作用：HTML实现页面结构，CSS完成页面的表现与风格，JavaScript实现一些客户端的功能与业务。</p>
<h1 id="什么是语义化的HTML"><a href="#什么是语义化的HTML" class="headerlink" title="什么是语义化的HTML?"></a>什么是语义化的HTML?</h1><p>答:直观的认识标签，对于搜索引擎的抓取有好处，用正确的标签做正确的事情！<br>html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析，在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
<h1 id="CSS居中（包括水平居中和垂直居中）"><a href="#CSS居中（包括水平居中和垂直居中）" class="headerlink" title="CSS居中（包括水平居中和垂直居中）"></a>CSS居中（包括水平居中和垂直居中）</h1><p>答:水平居中设置:<br>1.行内元素<br>设置 text-align:center；<br>2.Flex布局<br>设置display:flex;justify-content:center;(灵活运用,支持Chroime，Firefox，IE9+)</p>
<p>垂直居中设置：<br>1.父元素高度确定的单行文本（内联元素）<br>设置 height = line-height；<br>2.父元素高度确定的多行文本（内联元素）<br>a:插入 table （插入方法和水平居中一样），然后设置 vertical-align:middle；<br>b:先设置 display:table-cell 再设置 vertical-align:middle；<br>块级元素居中方案</p>
<p>水平居中设置：<br>1.定宽块状元素<br>设置 左右 margin 值为 auto；<br>2.不定宽块状元素<br>a:在元素外加入 table 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 margin 的值为 auto；<br>b:给该元素设置 displa:inine 方法；<br>c:父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:50%；</p>
<p>垂直居中设置：<br>使用position:absolute（fixed）,设置left、top、margin-left、margin-top的属性;<br>利用position:fixed（absolute）属性，margin:auto这个必须不要忘记了;<br>利用display:table-cell属性使内容垂直居中;<br>使用css3的新属性transform:translate(x,y)属性;<br>使用:before元素;</p>
<h1 id="CSS3有哪些新特性？"><a href="#CSS3有哪些新特性？" class="headerlink" title="CSS3有哪些新特性？"></a>CSS3有哪些新特性？</h1><p>答:CSS3实现圆角（border-radius: 8px），阴影（box-shadow: 10px），<br>对文字加特效（text-shadow），线性渐变（gradient），变换（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜<br>还增加了更多的CSS选择器，多背景，rgba等</p>
<h1 id="事件委托是什么？"><a href="#事件委托是什么？" class="headerlink" title="事件委托是什么？"></a>事件委托是什么？</h1><p>答:利用事件冒泡的原理，使自己的所触发的事件，让它的父元素代替执行！</p>
<h1 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h1><p>答:优雅降级:Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。<br>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p>
<h1 id="JavaScript原型，原型链都是什么-有什么特点？"><a href="#JavaScript原型，原型链都是什么-有什么特点？" class="headerlink" title="JavaScript原型，原型链都是什么? 有什么特点？"></a>JavaScript原型，原型链都是什么? 有什么特点？</h1><p>答:原型对象也是普通的对象，是对象一个自带隐式的 <strong>proto</strong>属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。<br>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。</p>
<h1 id="如何阻止事件冒泡和默认事件"><a href="#如何阻止事件冒泡和默认事件" class="headerlink" title="如何阻止事件冒泡和默认事件"></a>如何阻止事件冒泡和默认事件</h1><p>答:阻止冒泡:<br>现代浏览器:e.stopPropagation<br>低版本浏览器:e.cancelBubble=true</p>
<p>阻止默认事件:<br>现代浏览器:e.preventDefult()<br>低版本浏览器:return false</p>
<h1 id="iOS苹果和微信中音频和视频实现自动播放的方法"><a href="#iOS苹果和微信中音频和视频实现自动播放的方法" class="headerlink" title="iOS苹果和微信中音频和视频实现自动播放的方法"></a>iOS苹果和微信中音频和视频实现自动播放的方法</h1><p>答:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般情况下，这样就可以自动播放了，但是一些奇葩iPhone机不可以 </span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'audio'</span>).play(); </div><div class="line"><span class="comment">//必须在微信Weixin JSAPI的WeixinJSBridgeReady才能生效 </span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'audio'</span>).play(); </div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>).play(); </div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<h1 id="解释GET-POST的区别"><a href="#解释GET-POST的区别" class="headerlink" title="解释GET/POST的区别"></a>解释GET/POST的区别</h1><p>答:GET请求，请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数用&amp;连接。URL的编码格式采用的是ASCII编码，而不是uniclde，即是说所有的非ASCII字符都要编码之后再传输。<br>POST请求：POST请求会把请求的数据放置在HTTP请求包的包体中。<br>因此，GET请求的数据会暴露在地址栏中，而POST请求则不会。<br>关于传输数据的大小<br>在HTTP规范中，没有对URL的长度和传输的数据大小进行限制。但是在实际开发过程中，对于GET，特定的浏览器和服务器对URL的长度有限制。因此，在使用GET请求时，传输数据会受到URL长度的限制。<br>对于POST，由于不是URL传值，理论上是不会受限制的，但是实际上各个服务器会规定对POST提交数据大小进行限制，Apache、IIS都有各自的配置。<br>关于安全性<br>Get是Form的默认方法，安全性相对比较低</p>
<h1 id="描述一下cookies，sessionStorage和localStorage的区别"><a href="#描述一下cookies，sessionStorage和localStorage的区别" class="headerlink" title="描述一下cookies，sessionStorage和localStorage的区别"></a>描述一下cookies，sessionStorage和localStorage的区别</h1><p>答:sessionStorage和localStorage是HTML5 Web Storage API 提供的，可以方便的在web请求之间保存数据。有了本地数据，就可以避免数据在浏览器和服务器间不必要地来回传递。<br>sessionStorage、localStorage、cookie都是在浏览器端存储的数据，其中 sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念。sessionStorage 是在同源的同窗口（或tab）中，始终存在的数据。也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。关闭窗口后，sessionStorage即被销毁。同时“独立”打开的不同窗口，即使是同一页面， sessionStorage对象也是不同的。cookies会发送到服务器端。其余两个不会。<br>Microsoft指出Internet Explorer 8增加cookie限制为每个域名50个，但IE7似乎也允许每个域名50个cookie。Firefox每个域名cookie限制为50个。Opera每个域名cookie限制为30个。Firefox和Safari允许cookie多达4097个字节，包括名name）、值（value）和等号。Opera许cookie多达4096个字节，包括：名（name）、值（value）和等号。Internet Explorer允许cookie多达4095 个字节，包括：名（name）、值（value）和等号。<br>区别：<br>Cookie:<br>每个域名存储量比较小（各浏览器不同，大致 4K ）<br>所有域名的存储量有限制（各浏览器不同，大致 4K ）<br>有个数限制（各浏览器不同）<br>会随请求发送到服务器<br>LocalStorage:<br>永久存储<br>单个域名存储量比较大（推荐 5MB ，各浏览器不同）<br>总体数量无限制<br>SessionStorage:<br>只在Session内有效<br>存储量更大（推荐没有限制，但是实际上各浏览器也不同）</p>
<h1 id="image和canvas在处理图片的时候有什么区别？"><a href="#image和canvas在处理图片的时候有什么区别？" class="headerlink" title="image和canvas在处理图片的时候有什么区别？"></a>image和canvas在处理图片的时候有什么区别？</h1><p>答:image是通过对象的形式描述图片的。<br>canvas通过专门的API将图片绘制在画布上。</p>
<h1 id="响应式布局的时候，轮播图使用两张不同的图片去适配大屏幕和超小屏幕，还是一张图片进行压缩适配不同终端，说明原因？"><a href="#响应式布局的时候，轮播图使用两张不同的图片去适配大屏幕和超小屏幕，还是一张图片进行压缩适配不同终端，说明原因？" class="headerlink" title="响应式布局的时候，轮播图使用两张不同的图片去适配大屏幕和超小屏幕，还是一张图片进行压缩适配不同终端，说明原因？"></a>响应式布局的时候，轮播图使用两张不同的图片去适配大屏幕和超小屏幕，还是一张图片进行压缩适配不同终端，说明原因？</h1><p>答:最好使用两张不同大小的图片去适配大屏幕和超小屏幕，这样可以针对不同设备的屏幕大小，来加载响应的图片，减少超小屏幕设备的网络流量消耗，加快响应速度，同时防止图片在大屏幕下分辨率不够导致失真的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人整理的一些最近碰到的一些较为有用的前端题目
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Angular</title>
    <link href="http://yoursite.com/2017/04/08/%E6%B5%85%E8%B0%88Angular/"/>
    <id>http://yoursite.com/2017/04/08/浅谈Angular/</id>
    <published>2017-04-08T02:57:28.000Z</published>
    <updated>2017-04-08T06:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>博主最近了解学习了一下angular，记录一下心得给大家分享一下~</p>
<h1 id="什么是Angular"><a href="#什么是Angular" class="headerlink" title="什么是Angular"></a>什么是Angular</h1><p>Angular是一个为动态WEB应用设计的结构框架，提供给大家一种新的开发应用方式，这种方式可以让你扩展HTML的语法，以弥补在构建动态WEB应用时静态文本的不足，从而在WEB应用程序中使用HTML声明动态内容。<a id="more"></a></p>
<h1 id="Angular有5个主要核心特性"><a href="#Angular有5个主要核心特性" class="headerlink" title="Angular有5个主要核心特性"></a>Angular有5个主要核心特性</h1><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>实现了把model与view完全绑定在一起，model变化，view也变化，反之亦然。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>在Angular中，模板相当于HTML文件被浏览器解析到DOM中，Angular遍历这些DOM，也就是说Angular把模板当做DOM来操作，去生成一些指令来完成对view的数据绑定。</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>吸收了传统的MVC设计模式但又不是传统意义上的MVC，更接近于MVVM(Moodel-View-ViewModel)。</p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>Angular拥有内建的依赖注入子系统，可以帮助开发人员更容易的开发，理解和测试应用。</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>可以用来创建自定义的标签，也可以用来装饰元素或者操作DOM属性。</p>
<h1 id="Angular的特点"><a href="#Angular的特点" class="headerlink" title="Angular的特点"></a>Angular的特点</h1><p>前后端分离，后端只需提供数据接口，路由，模板渲染等都在前端完成<br>html和js分离，展示和逻辑分离<br>减少JS代码，减少DOM元素查找，事件绑定等代码<br>适合API开发</p>
<h1 id="Angular的一些简单使用方式"><a href="#Angular的一些简单使用方式" class="headerlink" title="Angular的一些简单使用方式"></a>Angular的一些简单使用方式</h1><p><strong>首先在页面引入angular.js文件！</strong><br>Angular有一套完整的、可扩展的、用来帮助web应用开发的指令集，它使得HTML可以转变成“特定领域语言(DSL)”，是用来扩展浏览器能力的技术之一，在DOM编译期间，和HTML关联着的指令会被检测到，并且被执行，这使得指令可以为DOM指定行为，或者改变它。<br>Angular通过称为指令的新属性来扩展的HTML，带有前缀ng-，我们也可以称之为“指令属性”，它就是绑定在DOM元素上的函数，可以调用方法、定义行为、绑定controller及$scope对象、操作DOM，等等。<br>Angular指令指示的是“当关联的HTML结构进入编译阶段时应该执行的操作”，它本质上只是一个当编译器编译到相关DOM时需要执行的函数，可以写在元素的名称里，属性里，css类名里，注释里。<br>当浏览器启动、开始解析HTML时，DOM元素上的指令属性就会跟其他属性一样被解析，也就是说当一个Angular.js应用启动，Angular编译器就会遍历DOM树来解析HTML，寻找这些指令属性函数，在一个DOM元素上找到一个或多个这样的指令属性函数，它们就会被收集起来、排序，然后按照优先级顺序被执行。<br>Angular.js应用的动态性和响应能力，都要归功于指令属性，常见的有：ng-app、ng-init、ng-model、ng-bind、ng-repeat等等。</p>
<h2 id="ng-app"><a href="#ng-app" class="headerlink" title="ng-app"></a>ng-app</h2><p>ng-app指令来标明一个Angular应用程序，并通过Angular完成自动初始化应用和标记应用根作用域，同时载入和指令内容相关的模块，并通过拥有ng-app指令的标签为根节点开始编译其中的DOM。<br>引用方法很简单，如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如上引用，一个Angular应用程序初始化就完成了并标记了作用域，也就是div元素就是Angular应用程序的”所有者”，在它里面的指令也就会被Angular编译器所编译、解析了。</p>
<h2 id="ng-init"><a href="#ng-init" class="headerlink" title="ng-init"></a>ng-init</h2><p>ng-init指令初始化应用程序数据，也就是为AngularJS应用程序定义初始值，通常情况下，我们会使用一个控制器或模块来代替它，后面我们会介绍有关控制器和模块的知识。<br>如下所示，我们为应用程序变量name赋定初始值。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“name</span>=<span class="string">‘zhangsan’”</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们不仅可以赋值字符串，也可以赋值为数字、数组、对象，而且可以为多个变量赋初始值，如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“width</span>=<span class="string">3;length</span>=<span class="string">5”</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ng-model"><a href="#ng-model" class="headerlink" title="ng-model"></a>ng-model</h2><p>在AngularJS中，只需要使用ng-model指令就可以把应用程序数据绑定到HTML元素，实现model和view的双向绑定。<br>如下示例，使用ng-model指令对数据进行绑定。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span>&gt;</span></div><div class="line">请输入任意值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name”</span>&gt;</span></div><div class="line">你输入的为： &#123;&#123; name &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>ng-model把相关处理事件绑定到指定标签上，这样我们就可以不用在手工处理相关事件(比如change等)的条件下完成对数据的展现需求。<br>以上介绍了ng-model的单向绑定(view-&gt;model)后面控制器我们会用到它的双向绑定功能。</p>
<h3 id="ng-model原理"><a href="#ng-model原理" class="headerlink" title="ng-model原理"></a>ng-model原理</h3><p>angular加载完成之后会启动，首先找 ng-app指令<br>找到后认为ng-app里面的所有的内容都归angular来管<br>找子层标签里所有的指令，然后就可以找到ng-model<br>找到后会生成数据模型，然后挂在根作用域上面。<br>然后下面所有的标签都可以读取ng-model的值。</p>
<h2 id="ng-bind"><a href="#ng-bind" class="headerlink" title="ng-bind"></a>ng-bind</h2><p>指令ng-bind和Angular表达式有异曲同工之妙，但不同之处就在于ng-bind是在angular解析渲染完毕后才将数据显示出来的。<br>如下使用ng-bind指令绑定把应用程序数据。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span>&gt;</span></div><div class="line">    请输入一个名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name”</span>&gt;</span></div><div class="line">    Hello <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">“name”</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>PS：使用花括号语法时，因为浏览器需要首先加载页面，渲染它，然后AngularJS才能把它解析成你期望看到的内容，所以对于首个页面中的数据绑定操作，建议采用ng-bind，以避免其未被渲染的模板被用户看到。</p>
<h2 id="ng-click"><a href="#ng-click" class="headerlink" title="ng-click"></a>ng-click</h2><p>Angular也有自己的HTML事件指令，比如说通过ng-click定义一个AngularJS单击事件。<br>对按钮、链接等，我们都可以用ng-click指令属性来实现绑定，如下简单示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“click</span>=<span class="string">false”</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">“click</span>= <span class="string">!click”</span>&gt;</span>隐藏/显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">“click”</span>&gt;</span></div><div class="line">        请输入一个名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name”</span>&gt;</span></div><div class="line">        Hello <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">“name”</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>PS：ng-hide=“true”，设置HTML元素不可见。<br>ng-click指令将DOM元素的鼠标点击事件(即mousedown)绑定到一个方法上，当浏览器在该DOM元素上鼠标触发点击事件时，Angular就会调用相应的方法。</p>
<h2 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h2><p>ng-repeat指令，遍历一个数据集合中的每个数据元素，并且加载HTML模版把数据渲染出来，当我们要向HTML容器节点中添加更多类似DOM元素的时候，使用ng-repeat是再好不过了。<br>ng-repeat指令对于集合中(数组中)的每一项都会渲染一次HTML元素。<br>例1:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“arr</span>=<span class="string">[‘3’,’5’,’9’]”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">“x</span> <span class="attr">in</span> <span class="attr">arr</span>”&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例2:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“obj</span>=<span class="string">&#123;‘user’:’zhangsan’,’pass’:’12345’,’sex’:’man’&#125;”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">“1”</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">“(key,value)</span> <span class="attr">in</span> <span class="attr">obj</span>”&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a>ng-class</h2><p>ng-class是AngularJS预设的一个指令，用于动态自定义dom元素的css class name<br><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">“utf-8”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">“text/css”</span>&gt;</span><span class="undefined"></span></div><div class="line">		.active&#123;</div><div class="line">			color: red;</div><div class="line">		&#125;</div><div class="line">		.inactive&#123;</div><div class="line">			color: green;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“angular.min.js”</span> <span class="attr">type</span>=<span class="string">“text/javascript”</span> <span class="attr">charset</span>=<span class="string">“utf-8”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“isActive</span>=<span class="string">false”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name1”</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name2”</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">“&#123;true:’active’,false:’inactive’&#125;[isActive]”</span>&gt;</span></div><div class="line">		&#123;&#123;name1 +” “+ name2&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ng-include"><a href="#ng-include" class="headerlink" title="ng-include"></a>ng-include</h2><p>ng-include就是将多个页面的公共页面提取出来，如header.html，footer.html等，在每个页面用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-include</span>=<span class="string">“’header.html’”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>来引入。<br><strong>注意: </strong><br>必须用web容器打开站点才能成功，用本地文件的模式访问会报错<br>ng-include的值是如果要写为文件名的话需要加单引号，否则会被当作一个变量来处理。</p>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="控制器scope"><a href="#控制器scope" class="headerlink" title="控制器scope"></a>控制器scope</h3><p>Angular控制器控制Angular应用程序的数据，是常规的JavaScript对象。<br>ng-controller指令就是用来定义应用程序控制器的，并且同时创建了一个新的作用域关联到相应的DOM元素上。<br>所谓作用域就是一个指向应用模型的对象，它是表达式的执行环境，作用域有层次结构，这个层次和相应的DOM几乎是一样的，作用域能监控表达式和传递事件并且可以从父作用域继承属性。<br>每一个Angular应用都有一个绝对的根作用域。但也可能有多个子作用域。 一个应用可以有多个作用域，因为有一些指令会生成新的子作用域，当新作用域被创建的时候，他们会被当成子作用域添加到父作用域下，这使得作用域会变成一个和相应DOM结构一个的树状结构。</p>
<h4 id="控制器上的属性"><a href="#控制器上的属性" class="headerlink" title="控制器上的属性"></a>控制器上的属性</h4><p>现在我们就用ng-controller指令来创建一个简单的控制器定义，如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-controller</span>=<span class="string">“MyController”</span>&gt;</span></div><div class="line">请输入一个名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“person.name”</span>&gt;</span> </div><div class="line">Hello <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind</span>=<span class="string">“person.name”</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyController</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">   $scope.person = &#123;</div><div class="line">      <span class="attr">name</span>: “zhangsan”</div><div class="line">   &#125;;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如上所述，我们通过ng-controller指令创建了一个JavaScript对象 —— MyController并带有name属性，那参数$scope是什么呢，代表什么意思呢。<br>现在我们就来解答MyController对象参数 —— $scope。<br>$scope就是把一个DOM元素连结到控制器上的对象，它提供一个绑定到DOM元素(以及其子元素)上的执行上下文。它也是一个JavaScript对象，指向应用程序作用域内的所有HTML元素和执行上下文。<br>要明确创建一个$scope对象，我们就要给DOM元素安上一个controller对象，使用的是ng-controller 指令属性。<br>所有$scope都遵循原型继承，这意味着它们都能访问父$scope们,对任何属性和方法，如果Angular在当前$scope上找不到，就会到父$scope上去找，如果在父$scope上也没找到，就会继续向上回溯，一直到$rootScope上，这个$rootScope是最顶级的$scope，它对应着含有 ng-app指令属性的那个DOM元素，也就是说根作用域关联的DOM就是ng-app指令定义的地方。<br>也就是说，拥有了$scope，我们就可以操作作用域内任何我们想要获取的对象数据。</p>
<h4 id="控制器上的方法"><a href="#控制器上的方法" class="headerlink" title="控制器上的方法"></a>控制器上的方法</h4><p>控制器不仅声明属性也可以声明方法，如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-controller</span>=<span class="string">“MyController”</span>&gt;</span></div><div class="line">     名称:</div><div class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“username”</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">“sayHello()”</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">     &#123;&#123;greeting&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyController</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.username = ‘zhangsan’;</div><div class="line">  $scope.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.greeting= ‘Hello ‘ + $scope.username + ‘!’;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>不要试图去复用controller,一个控制器一般只负责一小块视图<br>不要在controller中操作DOM，这不是控制器的职责，是指令的职责。<br>不要在controller里做数据格式化，ng有很好用的过滤器实现此功能。<br>不要在controller里面做数据过滤操作，ng有$filter服务<br>一般来说，controller是不会互相调用的，控制器这间的交互是通过事件进行的。</p>
<h3 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h3><p>指令定义对象的常用属性如下：<br><strong>template : string</strong><br>使用template指定的HTML标记替换指令内容（或指令自身）<br><strong>restrict : string</strong><br>用来限定指令在HTML模板中出现的位置。<br><strong>replace : true|false</strong><br>使用这个属性指明template的替换方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"testController"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">text-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">text-directive</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="Angular的服务"><a href="#Angular的服务" class="headerlink" title="Angular的服务"></a>Angular的服务</h1><p>Angular提供了一些功能的封装，但是当你试图通过全局对象angular去 访问这些功能时，却发现与以往遇到的库大不相同。<br>$http<br>比如，在jQuery中，我们知道它的API通过一个全局对象：$ 暴露出来，当你需要 进行ajax调用时，使用$.ajax()就可以了。这样的API很符合思维的预期。<br>AngularJS也暴露了一个全局对象：angular，也对ajax调用进行封装提供了一个 $http对象，但是，但是，当你试图沿用旧经验访问angular.$http时，发现不是 那么回事！在angular中是以一个参数的形式传递到控制器中，如果要使用它，需要在 controller 中定义。</p>
<h2 id="http服务"><a href="#http服务" class="headerlink" title="$http服务"></a>$http服务</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/angular.js/1.5.0-beta.0/angular-sanitize.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-bind-html</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, [<span class="string">'ngSanitize'</span>]);</div><div class="line">	app.controller(<span class="string">"myCtrl"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">		$http.get(<span class="string">"content.html"</span>).success(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">			$scope.content = res;</div><div class="line">		&#125;)</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var app = angular.module(“myApp”,[]);</div><div class="line">app.controller(“myCtrl”,function ($scope,$timeout)&#123;</div><div class="line">	</div><div class="line">	$timeout(function ()&#123;</div><div class="line">		alert(‘a’);</div><div class="line">	&#125;,2000);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">var app = angular.module(“myApp”,[]);</div><div class="line">app.controller(“myCtrl”,function ($scope,$interval)&#123;</div><div class="line">	//循环定时器</div><div class="line">	$interval(function ()&#123;</div><div class="line">		alert(‘a’);</div><div class="line">	&#125;,2000);</div><div class="line">&#125;);</div><div class="line">## 模仿百度搜索功能</div><div class="line">```html</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myController"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"wd"</span> <span class="attr">ng-change</span>=<span class="string">"change()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in query"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular-sanitize.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> app = angular.module(<span class="string">"myApp"</span>, [<span class="string">"ngSanitize"</span>]);</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myControllerCb</span> (<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">            $scope.wd = <span class="string">""</span>;</div><div class="line">            $scope.change = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                $http.jsonp(<span class="string">"https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd="</span>+$scope.wd+<span class="string">"&amp;cb=JSON_CALLBACK"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(res.data);</div><div class="line">                    $scope.query = res.data.s;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        app.controller(<span class="string">"myController"</span>, myControllerCb);</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Angular过滤器"><a href="#Angular过滤器" class="headerlink" title="Angular过滤器"></a>Angular过滤器</h1><p>过滤器可以使用一个管道字符（|）添加到表达式和指令中。<br>currency——格式化数字为货币格式。<br>filter——从数组项中选择一个子集。<br>lowercase——格式化字符串为小写。<br>orderBy——根据某个表达式排列数组。<br>uppercase——格式化字符串为大写。<br>例1(格式化数字为货币格式):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“myApp”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">“myCtrl”</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>相乘<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“num1”</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“num2”</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">!—currency:”￥”</span> 中文—&gt;</span></div><div class="line">		结果为：&#123;&#123;myFn() | currency&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> app = angular.module(“myApp”,[]);</div><div class="line">	app.controller(“myCtrl”,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>)</span>&#123;</div><div class="line">		$scope.num1=<span class="number">5</span>;</div><div class="line">		$scope.num2=<span class="number">10</span>;</div><div class="line">		$scope.myFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> $scope.num1*$scope.num2;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例2(字体大小转换):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">!—&#123;&#123;‘HelloWorld’</span> | <span class="attr">lowercase</span>&#125;&#125;—&gt;</span></div><div class="line">		&#123;&#123;‘HelloWorld’ | uppercase&#125;&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例3(筛选):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“”</span> <span class="attr">ng-init</span>=<span class="string">“arr</span>=<span class="string">[‘tangcaiye’,’zhangsan’,’lisi’]”</span>&gt;</span></div><div class="line">	搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">“text”</span> <span class="attr">ng-model</span>=<span class="string">“name”</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">“x</span> <span class="attr">in</span> <span class="attr">arr</span> | <span class="attr">filter:name</span>”&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>例4(筛选加排序):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">“myApp”</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">“myCtrl”</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">“x</span> <span class="attr">in</span> <span class="attr">friends</span> |<span class="attr">filter:</span>’<span class="attr">a</span>’ | <span class="attr">orderBy:order:true</span>”&gt;</span>&#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">“text/javascript”</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> app = angular.module(“myApp”,[]);</div><div class="line">	app.controller(“myCtrl”,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>)</span>&#123;</div><div class="line">		$scope.friends = [&#123;<span class="attr">name</span>:’John’, <span class="attr">phone</span>:’<span class="number">555</span><span class="number">-1212</span>’, <span class="attr">age</span>:<span class="number">21</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:’Mary’, <span class="attr">phone</span>:’<span class="number">555</span><span class="number">-9876</span>’, <span class="attr">age</span>:<span class="number">19</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:’Mike’, <span class="attr">phone</span>:’<span class="number">555</span><span class="number">-4321</span>’, <span class="attr">age</span>:<span class="number">10</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:’Adam’, <span class="attr">phone</span>:’<span class="number">555</span><span class="number">-5678</span>’, <span class="attr">age</span>:<span class="number">35</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:’Julie’, <span class="attr">phone</span>:’<span class="number">555</span><span class="number">-8765</span>’, <span class="attr">age</span>:<span class="number">29</span>&#125;];</div><div class="line">       $scope.order=“phone”;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博主最近了解学习了一下angular，记录一下心得给大家分享一下~&lt;/p&gt;
&lt;h1 id=&quot;什么是Angular&quot;&gt;&lt;a href=&quot;#什么是Angular&quot; class=&quot;headerlink&quot; title=&quot;什么是Angular&quot;&gt;&lt;/a&gt;什么是Angular&lt;/h1&gt;&lt;p&gt;Angular是一个为动态WEB应用设计的结构框架，提供给大家一种新的开发应用方式，这种方式可以让你扩展HTML的语法，以弥补在构建动态WEB应用时静态文本的不足，从而在WEB应用程序中使用HTML声明动态内容。
    
    </summary>
    
      <category term="angular" scheme="http://yoursite.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>node.js基础（三）</title>
    <link href="http://yoursite.com/2017/03/17/node.js%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/17/node.js基础（三）/</id>
    <published>2017-03-17T03:01:13.000Z</published>
    <updated>2017-03-17T13:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http模块深入"><a href="#http模块深入" class="headerlink" title="http模块深入"></a>http模块深入</h1><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>http: 超文本传输协议，所有路由都是通过它来传输，通过它能够构建一个客户端与服务端连接的管道<br>http模块: 能够构建服务器环境（模拟客户端）<a id="more"></a></p>
<h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>类似<strong>node.js基础（一）</strong>文章中提到的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(req.url);    <span class="comment">// 打印请求的路径</span></div><div class="line">	<span class="built_in">console</span>.log(req.method); <span class="comment">// 打印请求的方法</span></div><div class="line">	res.end(<span class="string">"结束本次请求"</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><p><strong>使用from表单进行简单的前后台交互</strong><br>首先创建三个文件，<strong>index.html</strong>和<strong>form.html</strong>以及<strong>http.js</strong>（名字随意，具体是了解如何实现）。<br><strong>index.html</strong>文件内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"form.html"</span>&gt;</span>跳转到登录注册页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>form.html</strong>文件内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>http.js</strong>文件内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</div><div class="line">	<span class="keyword">if</span> (urlObj.pathname == <span class="string">"/"</span> || urlObj.pathname == <span class="string">"/index.html"</span>) &#123;</div><div class="line">		<span class="comment">// 把本项目中的index.html读出来，写进响应res中</span></div><div class="line">		<span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"index.html"</span>);</div><div class="line">		rs.pipe(res);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname == <span class="string">"/form.html"</span>) &#123;</div><div class="line">		fs.createReadStream(<span class="string">"form.html"</span>).pipe(res);</div><div class="line">		<span class="built_in">console</span>.log(urlObj.query); <span class="comment">// 输出用户名和密码</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// 如果输出来乱码的同学可以加上下面这句话</span></div><div class="line">		res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span>&#125;);</div><div class="line">		res.end(<span class="string">"结束本次请求"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<p>至此可以试一下打开http.js的模拟服务器，在浏览器输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 进行一下相关操作看一下效果吧。<br><img src="http://olk97sdgv.bkt.clouddn.com/node_example.png" alt="Image"><br><img src="http://olk97sdgv.bkt.clouddn.com/node_example2.png" alt="Image"><br><img src="http://olk97sdgv.bkt.clouddn.com/node_example3.png" alt="Image"><br>最终效果在终端能够如图所示就大功告成了，但是这里只有简单的两个页面交互，如果有许许多多的页面，每个页面都要去else if判断一下是不是太麻烦了，这里有个较为简便的方法，在<strong>http.js</strong>的文件中将else if改为如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname != <span class="string">"/favicon.ico"</span>) &#123;</div><div class="line">	fs.createReadStream(<span class="string">"."</span> + urlObj.pathname).pipe(res);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就不用写很多pathname去一一匹配了~是不是很方便呢！<br>这里默认的传输方式是通过GET，那如果是POST该怎么写呢？</p>
<h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p><strong>使用from表单的POST传输方式进行简单的前后台交互</strong><br>还是实例1中的三个文件，将<strong>form.html</strong>文件的<strong>form</strong>标签里的属性更改为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/post"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后再将<strong>http.js</strong>更改为如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> queryString = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</div><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">"formidable"</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</div><div class="line">	<span class="keyword">if</span> (urlObj.pathname == <span class="string">"/"</span> || urlObj.pathname == <span class="string">"/index.html"</span>) &#123;</div><div class="line">		<span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"index.html"</span>);</div><div class="line">		rs.pipe(res);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname == <span class="string">"/post"</span>) &#123;</div><div class="line">		res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span>&#125;);</div><div class="line">		<span class="comment">// 处理post传进来的数据</span></div><div class="line">		<span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">		req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">		str += chunk;</div><div class="line">	&#125;);</div><div class="line">	req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> query = queryString.parse(str);</div><div class="line">		<span class="built_in">console</span>.log(query);</div><div class="line">	&#125;);</div><div class="line">		res.end(<span class="string">"你请求的地址是"</span> + urlObj.pathname);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname != <span class="string">"/favicon.ico"</span>) &#123;</div><div class="line">		fs.createReadStream(<span class="string">"."</span> + urlObj.pathname).pipe(res);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<p>这样最终效果同GET方式一样能够获取到填写的用户名和密码，并且最终页面返回的结果是“你请求的地址是/post”</p>
<h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><p><strong>使用from表单的POST传输方式进行简单的图片上传的操作</strong><br>这里同样是上述的三个文件，在<strong>form.html</strong>文件中加上上传文件的标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fileup"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<strong>http.js</strong>中也添加一段对post传输文件的操作，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname == <span class="string">"/post"</span>) &#123;</div><div class="line">	<span class="comment">// 处理上传文件</span></div><div class="line">	<span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">	form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</div><div class="line">		<span class="comment">// fields: 是提交过来的字段</span></div><div class="line">		<span class="comment">// files: 是提交过来的文件对象，文件会存储在临时路径</span></div><div class="line">		<span class="keyword">var</span> rs = fs.createReadStream(files.fileup.path);</div><div class="line">		<span class="comment">// 将文件从临时路径存放到指定目录下</span></div><div class="line">		<span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">"./upload/"</span> + files.fileup.name);</div><div class="line">		rs.pipe(ws);</div><div class="line">	&#125;);</div><div class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html;charset = utf-8"</span>&#125;);</div><div class="line">	res.end(<span class="string">"你请求的地址是"</span> + urlObj.pathname);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时可以测试一下上传一张图片看看能否在upload目录下找到同样的图片~</p>
<h2 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h2><p><strong>ajax请求的发送与接收</strong><br>这里就不需要<strong>form.html</strong>文件了，将<strong>index.html</strong>加上一段<strong>script</strong>标签进行ajax请求发送，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> time = <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>);</div><div class="line">		<span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">		ajax.open(<span class="string">"GET"</span>, <span class="string">"/ajax?user=test&amp;pass=123"</span>, <span class="literal">true</span>);</div><div class="line">		ajax.send();</div><div class="line">		ajax.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">			time.innerHTML = ajax.responseText;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<strong>http.js</strong>文件中的else if后再加上一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname == <span class="string">"/ajax"</span>) &#123;</div><div class="line">	<span class="comment">// 接收了ajax传输的数据</span></div><div class="line">	<span class="built_in">console</span>.log(urlObj.query);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终同样在浏览器输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 在终端就能收到ajax发送出来的user和pass两个字段了~</p>
<h2 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h2><p><strong>http模拟客户端</strong><br>这里我们再新建一个名为<strong>request.js</strong>的文件，这里提供get和post两种写法，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">get方式</div><div class="line"><span class="keyword">var</span> request = http.request(&#123;</div><div class="line">	<span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">	<span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">	<span class="attr">path</span>: <span class="string">"/request?user=test&amp;pass=111"</span>,</div><div class="line">	<span class="attr">method</span>: <span class="string">"get"</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">	<span class="comment">// console.log(res.statusCode);</span></div><div class="line">	res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(chunk.toString());</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">request.end(<span class="string">"请求结束"</span>); <span class="comment">// 结束本次请求</span></div><div class="line"></div><div class="line"><span class="comment">// post方式</span></div><div class="line"><span class="keyword">var</span> request = http.request(&#123;</div><div class="line">	<span class="attr">host</span>: <span class="string">"localhost"</span>,</div><div class="line">	<span class="attr">port</span>: <span class="string">"8080"</span>,</div><div class="line">	<span class="attr">path</span>: <span class="string">"/request"</span>,</div><div class="line"><span class="attr">method</span>: <span class="string">"post"</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">	<span class="comment">// console.log(res.statusCode);</span></div><div class="line">	res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(chunk.toString());</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">request.write(<span class="string">"user=test&amp;pass=111"</span>);</div><div class="line">request.end(<span class="string">"请求结束"</span>); <span class="comment">// 结束本次请求</span></div></pre></td></tr></table></figure></p>
<p>然后在<strong>http.js</strong>文件中再添加一段else if代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (urlObj.pathname == <span class="string">"/request"</span>) &#123;</div><div class="line">	<span class="comment">// get方式</span></div><div class="line">	<span class="built_in">console</span>.log(urlObj.query);</div><div class="line">	res.statusCode = <span class="number">200</span>;</div><div class="line">	res.end(<span class="string">'&#123;"err": 0, "msg": "请求的内容"&#125;'</span>);</div><div class="line"></div><div class="line">	<span class="comment">// post方式</span></div><div class="line">	req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">	    <span class="built_in">console</span>.log(chunk.toString());</div><div class="line">	&#125;);</div><div class="line">	res.end(<span class="string">'&#123;"err": 0, "msg": "请求的内容"&#125;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们先开启一下<strong>http.js</strong>这个模拟服务器，在运行<strong>request.js</strong>进行模拟请求，我们会发现<strong>request.js</strong>会返回出<code>{&quot;err&quot;: 0, &quot;msg&quot;: &quot;请求的内容&quot;}</code>，然后服务器会返回出<code>user=xxx&amp;pass=111 请求结束</code>。如果出现这种结果就说明发送成功了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;http模块深入&quot;&gt;&lt;a href=&quot;#http模块深入&quot; class=&quot;headerlink&quot; title=&quot;http模块深入&quot;&gt;&lt;/a&gt;http模块深入&lt;/h1&gt;&lt;h2 id=&quot;http协议&quot;&gt;&lt;a href=&quot;#http协议&quot; class=&quot;headerlink&quot; title=&quot;http协议&quot;&gt;&lt;/a&gt;http协议&lt;/h2&gt;&lt;p&gt;http: 超文本传输协议，所有路由都是通过它来传输，通过它能够构建一个客户端与服务端连接的管道&lt;br&gt;http模块: 能够构建服务器环境（模拟客户端）
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="http://yoursite.com/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>node.js基础（二）</title>
    <link href="http://yoursite.com/2017/03/16/node.js%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/16/node.js基础（二）/</id>
    <published>2017-03-16T11:14:41.000Z</published>
    <updated>2017-03-17T08:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js的回调函数"><a href="#node-js的回调函数" class="headerlink" title="node.js的回调函数"></a>node.js的回调函数</h1><p>node.js 异步编程的直接体现就是回调，异步编程依托于回调来实现<a id="more"></a></p>
<h2 id="例1：服务器的回调"><a href="#例1：服务器的回调" class="headerlink" title="例1：服务器的回调"></a>例1：服务器的回调</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html; charset=utf-8"</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"服务运行中"</span>);</div><div class="line">    res.end(<span class="string">"服务结束"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// listen(端口, 域名, 成功的回调)</span></div><div class="line">server.listen(<span class="number">8080</span>, <span class="string">"localhost"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"服务开启成功"</span>);  <span class="comment">// 这条会在之后先打印</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"我是服务下的"</span>);  <span class="comment">// 这条会最先打印</span></div></pre></td></tr></table></figure>
<h2 id="例2：读取文件的操作"><a href="#例2：读取文件的操作" class="headerlink" title="例2：读取文件的操作"></a>例2：读取文件的操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">fs.readFile(<span class="string">"test.txt"</span>, <span class="string">"utf-8"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">console</span>.error(err);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(data);  <span class="comment">// 这条会在之后先打印</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"我是读取操作之后的"</span>);  <span class="comment">// 这条会最先打印</span></div></pre></td></tr></table></figure>
<p>这里也介绍一下同步的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">"test.txt"</span>, <span class="string">"utf-8"</span>);</div><div class="line"><span class="built_in">console</span>.log(data);     <span class="comment">// 先执行文件内容</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"我是读取操作之后的"</span>);  <span class="comment">// 再执行后续内容</span></div></pre></td></tr></table></figure></p>
<h1 id="node-js的一些常用模块"><a href="#node-js的一些常用模块" class="headerlink" title="node.js的一些常用模块"></a>node.js的一些常用模块</h1><h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><p>util是一个工具函数包，这个模块保存了利于其他模块的工具，使用最多的有这三种：</p>
<h3 id="1、实现对象的原型继承"><a href="#1、实现对象的原型继承" class="headerlink" title="1、实现对象的原型继承"></a>1、实现对象的原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">	<span class="comment">// 构造函数继承</span></div><div class="line">    Parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line">util.inherits(Child, Parent); <span class="comment">// 对象的原型继承</span></div><div class="line"><span class="keyword">var</span> dad = <span class="keyword">new</span> Parent(<span class="string">"老爸"</span>, <span class="number">48</span>);</div><div class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Child(<span class="string">"儿子"</span>, <span class="number">28</span>);</div><div class="line">son.sayHello();</div><div class="line">son.sayName();</div></pre></td></tr></table></figure>
<h3 id="2、把一个对象作为字符串输出"><a href="#2、把一个对象作为字符串输出" class="headerlink" title="2、把一个对象作为字符串输出"></a>2、把一个对象作为字符串输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接着上面的案例</span></div><div class="line"><span class="keyword">var</span> str = util.inspect(son);  <span class="comment">// 将对象转化成字符串</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);      <span class="comment">// 输出string</span></div></pre></td></tr></table></figure>
<h3 id="3、数据类型的检测"><a href="#3、数据类型的检测" class="headerlink" title="3、数据类型的检测"></a>3、数据类型的检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</div><div class="line"><span class="built_in">console</span>.log(util.isArray([])); <span class="comment">// 判断其是否为数组，输出true</span></div></pre></td></tr></table></figure>
<h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p>事件：又称为发布订阅模式或者观察者模式</p>
<h3 id="获取事件模块的方法："><a href="#获取事件模块的方法：" class="headerlink" title="获取事件模块的方法："></a>获取事件模块的方法：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter(); <span class="comment">// 旧版写法</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);		     <span class="comment">// 新版写法</span></div></pre></td></tr></table></figure>
<h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>1.<strong>on</strong><br>2.<strong>addListener</strong><br>3.<strong>once</strong></p>
<h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><p><strong>removeListener</strong></p>
<h3 id="设置最大监听数"><a href="#设置最大监听数" class="headerlink" title="设置最大监听数"></a>设置最大监听数</h3><p><strong>setMaxListeners(Number);</strong></p>
<h3 id="发出事件"><a href="#发出事件" class="headerlink" title="发出事件"></a>发出事件</h3><p><strong>emit</strong></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);	</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">"util"</span>);</div><div class="line"><span class="comment">// 创建事件的发布者以及事件的观察者</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Girl</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 假设女孩饿了</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Boy</span> (<span class="params">name, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.response = response;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">util.inherits(Girl, events);  <span class="comment">// 继承来自于events原型上的方法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> goddess = <span class="keyword">new</span> Girl();</div><div class="line"><span class="keyword">var</span> boy1 = <span class="keyword">new</span> Boy(<span class="string">"男生1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"点饿了么"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> boy2 = <span class="keyword">new</span> Boy(<span class="string">"男生2"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"上美团点外卖"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> boy3 = <span class="keyword">new</span> Boy(<span class="string">"男生3"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"带你去吃饭"</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 绑定事件监听者</span></div><div class="line">goddess.on(<span class="string">"ele"</span>, boy1.response);</div><div class="line">goddess.addListener(<span class="string">"ele"</span>, boy3.response); <span class="comment">// on和addListener是等价的</span></div><div class="line">goddess.once(<span class="string">"ele"</span>, boy3.response);        <span class="comment">// once 只绑定一次 </span></div><div class="line">goddess.emit(<span class="string">"ele"</span>);  <span class="comment">// emit 表示发出事件</span></div></pre></td></tr></table></figure>
<h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><p>buffer：缓存的数据格式，缓存区<br>出现的原因：JavaScript本身不存在二进制的传输，只有字符串的，为了保存和处理二进制数据<br>buffer的形式是一个数组，而数组中的每一项是一个以16进制展示的8位字节<br>buffer是一个类，它能实例出一个全局对象<br>buffer的每一位它的取值范围0-255</p>
<h3 id="创建buffer的方法"><a href="#创建buffer的方法" class="headerlink" title="创建buffer的方法"></a>创建buffer的方法</h3><h4 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer(<span class="number">12</span>); <span class="comment">// 参数为number，表示buffer的长度</span></div><div class="line"><span class="built_in">console</span>.log(buff); <span class="comment">// 此时里面是随机的，由系统生成</span></div><div class="line"><span class="comment">// 填充 后两个参数表示从第几位开始第几位结束</span></div><div class="line">buff.fill(<span class="string">"a"</span>, <span class="number">3</span>, <span class="number">6</span>);</div></pre></td></tr></table></figure>
<h4 id="通过数组创建"><a href="#通过数组创建" class="headerlink" title="通过数组创建"></a>通过数组创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer([<span class="number">1</span>, <span class="number">34</span>, <span class="number">074</span>, <span class="number">0xa6</span>]);</div></pre></td></tr></table></figure>
<h4 id="通过字符串创建"><a href="#通过字符串创建" class="headerlink" title="通过字符串创建"></a>通过字符串创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer(<span class="string">"我是缓存区"</span>);</div></pre></td></tr></table></figure>
<h3 id="转成字符串"><a href="#转成字符串" class="headerlink" title="转成字符串"></a>转成字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buff = <span class="keyword">new</span> Buffer([<span class="number">0xe4</span>, <span class="number">0xbb</span>, <span class="number">0x8a</span>]);</div><div class="line"><span class="built_in">console</span>.log(buff4.toString()); <span class="comment">// 输出"今"</span></div></pre></td></tr></table></figure>
<h3 id="拼接buffer"><a href="#拼接buffer" class="headerlink" title="拼接buffer"></a>拼接buffer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buff1 = <span class="keyword">new</span> Buffer([<span class="number">0xe4</span>, <span class="number">0xbb</span>, <span class="number">0x8a</span>, <span class="number">0xe5</span>]);</div><div class="line"><span class="built_in">console</span>.log(buff1.toString());  <span class="comment">// 输出乱码</span></div><div class="line"><span class="keyword">var</span> buff2 = <span class="keyword">new</span> Buffer([<span class="number">0xa4</span>, <span class="number">0xa9</span>, <span class="number">0xe5</span>, <span class="number">0xa4</span>, <span class="number">0xa9</span>]);</div><div class="line"><span class="built_in">console</span>.log(buff2.toString());  <span class="comment">// 输出乱码</span></div><div class="line"></div><div class="line"><span class="comment">// 把buffer拼接起来解决输出乱码的问题(concat)</span></div><div class="line"><span class="built_in">console</span>.log(Buffer.concat([buff1, buff2]).toString()); <span class="comment">// 输出今天天</span></div></pre></td></tr></table></figure>
<p>但是这个方法太过于消耗内存<br>这里有一个更好的方法<strong>StringDecoder</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接上面的例子</span></div><div class="line"><span class="keyword">var</span> StringDecoder = <span class="built_in">require</span>(<span class="string">"string_decoder"</span>).StringDecoder; <span class="comment">// 返回一个类</span></div><div class="line"><span class="keyword">var</span> decode = <span class="keyword">new</span> StringDecoder();</div><div class="line"><span class="keyword">var</span> str = decode.write(buff1);</div><div class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 输出今</span></div><div class="line"><span class="keyword">var</span> str2 = decode.write(buff2);</div><div class="line"><span class="built_in">console</span>.log(str2);  <span class="comment">// 输出今天天</span></div></pre></td></tr></table></figure></p>
<h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><p>只包括一些文件以及目录的操作，并提供了这些操作的同步和异步的方法</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 异步操作</span></div><div class="line"><span class="comment">// readFile(第一个参数为读取的文件名，第二个为配置参数，第三个为回调函数)</span></div><div class="line">fs.readFile(<span class="string">"test.txt"</span>, <span class="string">"utf-8"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);  <span class="comment">// 如果有错误便弹出错误</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(data);  <span class="comment">// 输出文件的内容</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 同步操作</span></div><div class="line"><span class="keyword">var</span> data2 = fs.readFileSync(<span class="string">"test.txt"</span>, <span class="string">"utf-8"</span>);</div><div class="line"><span class="built_in">console</span>.log(data2); <span class="comment">// 输出文件的内容</span></div></pre></td></tr></table></figure>
<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// writeFile中的参数类似readFile</span></div><div class="line"><span class="comment">// 其中第三个参数为配置参数：flag表示的是一个读取的模式 不写默认是w为写入，a是追加写入，r为读取</span></div><div class="line">fs.writeFile(<span class="string">"test.txt"</span>, <span class="string">"我是写入进去的内容"</span>, &#123;<span class="attr">flag</span>: <span class="string">"a"</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"写入成功了"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fs.appendFile(<span class="string">"test.txt"</span>, <span class="string">"我是追加进去的内容"</span>, &#123;<span class="attr">flag</span>: <span class="string">"w"</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"追加成功了"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>复制文件的原理则是先读取出文件的内容在写入到另外一个文件之中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制文件(异步)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span> (<span class="params">src, dest</span>) </span>&#123;</div><div class="line">    fs.readFile(src, <span class="string">"utf-8"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.error(err);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        fs.writeFile(dest, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                <span class="built_in">console</span>.error(err);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"复制成功"</span>);</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 复制文件(同步)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span> (<span class="params">src, dest</span>) </span>&#123;</div><div class="line">    fs.writeFileSync(dest, fs.readFileSync(src, <span class="string">"utf-8"</span>), <span class="string">"utf-8"</span>);</div><div class="line">&#125;</div><div class="line">copy(<span class="string">"test.txt"</span>, <span class="string">"test2.txt"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="comment">// 第二个参数为权限的设置，它是一个3位8进制数，每一位数字由1，2，4组成，1是可执行、2是可写、4是可读</span></div><div class="line">fs.mkdir(<span class="string">"test"</span>, <span class="number">0555</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"创建成功"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fs.rmdir(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"删除成功"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h4><p>输出该目录下除了.和..的所有文件组成的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs.readdir(<span class="string">"./"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(files);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="查看文件或者目录详情"><a href="#查看文件或者目录详情" class="headerlink" title="查看文件或者目录详情"></a>查看文件或者目录详情</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs.stat(<span class="string">"./test.txt"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(stat);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.exists(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(exists);</div><div class="line">    <span class="comment">// 如果存在回调为TRUE，反之为FALSE</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="相对路径获取绝对路径"><a href="#相对路径获取绝对路径" class="headerlink" title="相对路径获取绝对路径"></a>相对路径获取绝对路径</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs.realpath(<span class="string">"test"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, path</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(path);  <span class="comment">// path即为获取到的绝对路径</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs.rename(<span class="string">"test"</span>, <span class="string">"newTest"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"重命名成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p>stream:流，它的出现是为了处理大数据，把一个大的文件截取成若干个大小为64K的小文件存储<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dest</span>) </span>&#123;</div><div class="line">    fs.writeFileSync(dest, fs.readFileSync(src));</div><div class="line">&#125;</div><div class="line">copy(<span class="string">"1.png"</span>, <span class="string">"2.png"</span>);</div></pre></td></tr></table></figure></p>
<p>上面是一个对文件拷贝的代码，看似没什么问题，也的确在处理小文件的时候没什么大问题，但是一旦处理数量级很大的文件的时候可以看出，先将数据读取出来，在写入，内存作为中转，如果文件太大就会产生问题。如果是大文件就得使用file system的另外几个API，createReadStream和createWriteStream，将文件作为一块一块小的数据流进行处理，而不是一整块大型数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建可读流</span></div><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">"1.png"</span>);</div><div class="line"><span class="comment">// 创建可写流</span></div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">"4.png"</span>);</div><div class="line"><span class="comment">//每一个可读流具有data事件</span></div><div class="line"><span class="keyword">var</span> times = <span class="number">0</span>;</div><div class="line">rs.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="comment">// 每64k会触发一次事件</span></div><div class="line">    times ++;</div><div class="line">    <span class="comment">// console.log(times);</span></div><div class="line">    <span class="comment">// console.log(chunk);</span></div><div class="line">    ws.write(chunk, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log("chunk写入成功");</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">rs.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(times);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当然上面的方法也可能产生内存爆仓，写入速度跟不上读取速度，一直读取的文件不断放入内存中，但是两个的操作的速度是肯定不一样的，导致未被写入的数据在内存中越来越大，才会是内存爆仓。<br>node中有一个较为简便的解决方法：<strong>pipe</strong>管道连接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.pipe(ws);</div></pre></td></tr></table></figure></p>
<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>path：里面封装了一些对文件的路径的操作<br>可以使用<strong>normalize</strong>规范化字符串路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> pathstr = <span class="string">"a/../b/./c/../d/f/./e"</span>;</div><div class="line"><span class="built_in">console</span>.log(path.normalize(pathstr)); <span class="comment">// 打印结果为b/d/f/e</span></div></pre></td></tr></table></figure></p>
<p><strong>__dirname</strong>显示当前绝对路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(__dirname);</div></pre></td></tr></table></figure></p>
<p><strong>join</strong>将多个参数值字符串结合成一个路径字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(path.join(__dirname, <span class="string">"a"</span>, <span class="string">"..b"</span>, <span class="string">"..c/e/./d"</span>, <span class="string">"text.txt"</span>));</div></pre></td></tr></table></figure></p>
<p><strong>resolve</strong>把一连串的路径解析成绝对路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(path.resolve(<span class="string">"baidu"</span>, <span class="string">"a/.."</span>, <span class="string">"n/.."</span>, <span class="string">"test.html"</span>));</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;node-js的回调函数&quot;&gt;&lt;a href=&quot;#node-js的回调函数&quot; class=&quot;headerlink&quot; title=&quot;node.js的回调函数&quot;&gt;&lt;/a&gt;node.js的回调函数&lt;/h1&gt;&lt;p&gt;node.js 异步编程的直接体现就是回调，异步编程依托于回调来实现
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="http://yoursite.com/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>node.js基础（一）</title>
    <link href="http://yoursite.com/2017/03/16/node.js%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/16/node.js基础（一）/</id>
    <published>2017-03-16T02:31:59.000Z</published>
    <updated>2017-03-17T01:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是node-js"><a href="#什么是node-js" class="headerlink" title="什么是node.js"></a>什么是node.js</h1><p>JavaScript是一个脚本语言，脚本语言都需要一个解析器才能运行，但是node.js采用C++语言编写而成，是一个Javascript的运行环境。既然不是Javascript应用，为何叫.js呢？因为Node.js是一个Javascript的运行环境。作为Web前端最重要的语言之一，Javascript一直是前端工程师的专利。不过，node.js是一个后端的Javascript运行环境，这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程等。浏览器端的Javascript代码在运行时会受到各种安全性的限制，对客户系统的操作有限。相比之下，Node.js则是一个全面的后台运行时，为Javascript提供了其他语言能够实现的许多功能。<a id="more"></a><br>它的三大特征：<strong>模块化，异步编程，事件驱动</strong></p>
<h1 id="实现http服务器"><a href="#实现http服务器" class="headerlink" title="实现http服务器"></a>实现http服务器</h1><p>使用node.js来实现第一个http服务器，<strong>博主是用WebStrom编译器来编译的</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要引入node的原生模块"http"</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line">* req: require,  包含一些URL信息，以及传入的数据</div><div class="line">* res: response, 包含请求回应的状态码，返回的信息等等</div><div class="line">* req.url     "/"   根目录</div><div class="line">* req.method  "GET" 请求方式</div><div class="line">* */</div><div class="line">    <span class="comment">// 设置输出文本编码格式为中文</span></div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf-8"</span>&#125;);</div><div class="line">    <span class="comment">// end不只是输出返回的内容，还代表本次请求的结束，它只能输出字符串</span></div><div class="line">    res.end(<span class="string">"我是请求回应的文本"</span>);</div><div class="line">&#125;).listen(<span class="number">8080</span>); <span class="comment">// 设置本服务器的端口号</span></div></pre></td></tr></table></figure></p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>可以参考<a href="http://www.cnblogs.com/dolphinX/p/4381855.html" target="_blank" rel="external">http://www.cnblogs.com/dolphinX/p/4381855.html</a></p>
<h2 id="为什么会有模块？"><a href="#为什么会有模块？" class="headerlink" title="为什么会有模块？"></a>为什么会有模块？</h2><p>在JavaScript发展初期就是为了实现简单的页面交互逻辑，寥寥数语即可。如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着web2.0时代的到来，Ajax技术得到广泛应用，jQuery等前端库层出不穷，前端代码日益膨胀，这时候JavaScript作为嵌入式的脚本语言的定位动摇了，JavaScript却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块（module）了，JavaScript极其简单的代码组织规范不足以驾驭如此庞大规模的代码</p>
<h2 id="模块的好处"><a href="#模块的好处" class="headerlink" title="模块的好处"></a>模块的好处</h2><p>既然JavaScript不能handle如此大规模的代码，我们可以借鉴一下其它语言是怎么处理大规模程序设计的，在Java中有一个重要带概念——package，逻辑上相关的代码组织到同一个包内，包内是一个相对独立的王国，不用担心命名冲突什么的，那么外部如果使用呢？直接import对应的package即可<code>import java.util.ArrayList;</code><br>遗憾的是JavaScript在设计时定位原因，没有提供类似的功能，开发者需要模拟出类似的功能，来隔离、组织复杂的JavaScript代码，我们称为模块化。一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，各行其是就都乱套了。</p>
<h2 id="commonjs规范"><a href="#commonjs规范" class="headerlink" title="commonjs规范"></a>commonjs规范</h2><p>CommonJS就是为JS的表现来制定规范，因为js没有模块的功能所以CommonJS应运而生，它希望js可以在任何地方运行，不只是浏览器中。<br>CommonJS能有一定的影响力，我觉得绝对离不开node.js的人气，不过，node.js，CommonJS，浏览器甚至是W3C之间有什么关系呢，如下图所示：<br><img src="http://olk97sdgv.bkt.clouddn.com/gx.png" alt="Image"></p>
<h2 id="引入url模块解析路径"><a href="#引入url模块解析路径" class="headerlink" title="引入url模块解析路径"></a>引入url模块解析路径</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>); <span class="comment">// 原生URL模块</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html; charset=utf-8"</span>&#125;);</div><div class="line">    <span class="comment">// parse(路径, 第二个参数为将请求参数解析为对象)</span></div><div class="line">    <span class="keyword">var</span> urlObj = url.parse(req.url, <span class="literal">true</span>); <span class="comment">// 第二个参数为true表示将内层的数据也给转换成对象</span></div><div class="line">    <span class="built_in">console</span>.log(urlObj);</div><div class="line">    res.end();</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure>
<h2 id="创建自定义模块"><a href="#创建自定义模块" class="headerlink" title="创建自定义模块"></a>创建自定义模块</h2><h3 id="加载当前目录的模块"><a href="#加载当前目录的模块" class="headerlink" title="加载当前目录的模块"></a>加载当前目录的模块</h3><p>不加var的变量是全局变量，在模块内部最好加var。<br>要导出一个属性或者方法使用: module.exports<br>如果是模块下的方法和属性使用: module.exports={xx:xx};<br>如果是想让模块直接接受方法就导出函数<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>; <span class="comment">// 模块里的变量一定要加上var</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addX</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a + x);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出该模块的属性和方法</span></div><div class="line"><span class="comment">// module.exports = &#123;</span></div><div class="line"><span class="comment">//     a: a,</span></div><div class="line"><span class="comment">//     addX: addX</span></div><div class="line"><span class="comment">// &#125;;</span></div><div class="line"><span class="built_in">module</span>.exports = addX;</div></pre></td></tr></table></figure></p>
<h3 id="加载非当前目录的模块"><a href="#加载非当前目录的模块" class="headerlink" title="加载非当前目录的模块"></a>加载非当前目录的模块</h3><p>首先会看当前目录是否有一个<strong>node_modules</strong>，如果有就看进入里面查找是否有叫模块名称的文件或者是否有叫模块名称的文件夹。<br>如果是模块名称的文件夹需要看一下文件夹内部是否有index.js或者package.json中是否有设置mian属性。<br>如果当前目录中没有node_modules，会向上查找。可以通过：<code>console.log(module);</code>输出</p>
<h3 id="加载原生模块"><a href="#加载原生模块" class="headerlink" title="加载原生模块"></a>加载原生模块</h3><p><img src="http://olk97sdgv.bkt.clouddn.com/jz.png" alt="Image"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>非node项目中也可以使用模块化开发技术，用得比较多的模块加载器有：requirejs(CMD),seaJs(AMD)。</p>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>它是包（一组模块的集合）。<br>npm作为node的包管理器</p>
<h1 id="repl-交互式解释器"><a href="#repl-交互式解释器" class="headerlink" title="repl(交互式解释器)"></a>repl(交互式解释器)</h1><h2 id="REPL-Read-Eval-Print-Loop-交互式解释器-概念"><a href="#REPL-Read-Eval-Print-Loop-交互式解释器-概念" class="headerlink" title="REPL(Read Eval Print Loop:交互式解释器)概念"></a>REPL(Read Eval Print Loop:交互式解释器)概念</h2><p>表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。<br>进入repl方式：终端中键入node。</p>
<h2 id="repl处理"><a href="#repl处理" class="headerlink" title="repl处理"></a>repl处理</h2><h3 id="表达式运算"><a href="#表达式运算" class="headerlink" title="表达式运算"></a>表达式运算</h3><p>可以进行简单的加减乘除运算，也可以使用变量甚至编写for循环while语句等等<br>可以使用下划线<strong>(_)</strong>获取表达式的上一次的运算结果</p>
<h3 id="REPL-命令"><a href="#REPL-命令" class="headerlink" title="REPL 命令"></a>REPL 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctrl c 退出当前终端。ctrl+c 按下两次，退出 Node REPL</div><div class="line">ctrl d 退出node REPL，向上/向下键，查看输入的历史命令</div><div class="line">tab 列出当前命令</div><div class="line">help 列出使用命令</div><div class="line">break 退出多行表达式</div><div class="line">clear 退出多行表达式</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是node-js&quot;&gt;&lt;a href=&quot;#什么是node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是node.js&quot;&gt;&lt;/a&gt;什么是node.js&lt;/h1&gt;&lt;p&gt;JavaScript是一个脚本语言，脚本语言都需要一个解析器才能运行，但是node.js采用C++语言编写而成，是一个Javascript的运行环境。既然不是Javascript应用，为何叫.js呢？因为Node.js是一个Javascript的运行环境。作为Web前端最重要的语言之一，Javascript一直是前端工程师的专利。不过，node.js是一个后端的Javascript运行环境，这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程等。浏览器端的Javascript代码在运行时会受到各种安全性的限制，对客户系统的操作有限。相比之下，Node.js则是一个全面的后台运行时，为Javascript提供了其他语言能够实现的许多功能。
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="http://yoursite.com/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的一些基本知识 -- 函数</title>
    <link href="http://yoursite.com/2017/03/11/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/11/JavaScript的一些基本知识 -- 函数/</id>
    <published>2017-03-11T12:42:24.000Z</published>
    <updated>2017-03-11T13:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的基本函数"><a href="#JavaScript的基本函数" class="headerlink" title="JavaScript的基本函数"></a>JavaScript的基本函数</h1><h2 id="函数的定义方法"><a href="#函数的定义方法" class="headerlink" title="函数的定义方法"></a>函数的定义方法</h2><h3 id="1-静态方法"><a href="#1-静态方法" class="headerlink" title="1.静态方法"></a>1.静态方法<a id="more"></a></h3><p><strong>function 函数名 (参数) {code….};</strong><br>函数定义之后不会立即执行{}里面的代码，而是会等到调用的时候才会执行。</p>
<h3 id="2-匿名方法"><a href="#2-匿名方法" class="headerlink" title="2.匿名方法"></a>2.匿名方法</h3><p><strong>var 函数名 = function (参数) {code….};</strong></p>
<h3 id="3-直接量方法"><a href="#3-直接量方法" class="headerlink" title="3.直接量方法"></a>3.直接量方法</h3><p><strong>函数名 = function (参数) {code….};</strong></p>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="参数的类型"><a href="#参数的类型" class="headerlink" title="参数的类型"></a>参数的类型</h3><h4 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h4><p>形参不会改变实参的值<br>定义函数时使用的参数</p>
<h4 id="实际参数"><a href="#实际参数" class="headerlink" title="实际参数"></a>实际参数</h4><p>调用函数时传递给函数的实际参数</p>
<h3 id="参数的特性"><a href="#参数的特性" class="headerlink" title="参数的特性"></a>参数的特性</h3><p>函数的参数没有个数限制<br>参数的数据类型也没有限制<br>通过arguments对象访问函数参数的数组<br>参数始终按值传递</p>
<h2 id="函数的arguments对象"><a href="#函数的arguments对象" class="headerlink" title="函数的arguments对象"></a>函数的arguments对象</h2><p>arguments对象是存放函数实际参数的参数列表<br>它只能在函数内部使用，它不是数组，但是带有下标属性<br>每次函数声明时它会自动初始化<br>它有三个基本属性：<br><strong>1.length</strong><br>获取实际参数的长度<br><strong>2.callee</strong><br>返回当前正在指向的函数<br><strong>3.caler</strong><br>返回调用当前正在执行函数的函数名</p>
<h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><p>1.有参数有返回值<br>2.无参数无返回值<br>3.有参数无返回值<br>4.无参数有返回值</p>
<h2 id="函数的指针标识"><a href="#函数的指针标识" class="headerlink" title="函数的指针标识"></a>函数的指针标识</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>指向当前操作对象</p>
<h3 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h3><p>指向参数集合所属函数</p>
<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>指向函数附带的原型对象</p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>指向创建该对象的构造函数</p>
<h2 id="函数的调用方法"><a href="#函数的调用方法" class="headerlink" title="函数的调用方法"></a>函数的调用方法</h2><h3 id="1-在事件中调用"><a href="#1-在事件中调用" class="headerlink" title="1.在事件中调用"></a>1.在事件中调用</h3><p><strong>事件类型 = 函数名();</strong></p>
<h3 id="2-直接调用"><a href="#2-直接调用" class="headerlink" title="2.直接调用"></a>2.直接调用</h3><p><strong>函数名();</strong></p>
<h3 id="3-自执行"><a href="#3-自执行" class="headerlink" title="3.自执行"></a>3.自执行</h3><p>**(function (){})();</p>
<h3 id="4-在连接中调用"><a href="#4-在连接中调用" class="headerlink" title="4.在连接中调用"></a>4.在连接中调用</h3><p><strong><a href="javascript:函数名()" target="_blank" rel="external"></a></strong></p>
<h2 id="函数的回调"><a href="#函数的回调" class="headerlink" title="函数的回调"></a>函数的回调</h2><p>把函数2当做参数传到函数1里面，在函数1里面调用函数2，就叫函数回调。</p>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>函数里面写了<strong>return</strong>之后，下面不能写代码，不会被执行<br>当调用这个函数之后，可以接收到什么东西。可以在函数里面通过<strong>return 返回值名</strong>来返回</p>
<h2 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h2><p>函数内部的函数就是闭包<br>闭包的两个基本作用：<br>1.每次访问函数1得到的函数2的函数是不一样的函数。他们的空间不是同一块内存空间<br>2.通过闭包可以访问函数内部的局部变量</p>
<h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><p>在函数内部调用自己这个函数，这样会形成一个死循环，所以使用递归的时候必须给程序一个出口。<br><img src="http://olk97sdgv.bkt.clouddn.com/JavaScript-Basics/JS-function.png" alt="Image"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中函数的基本知识</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的基本函数&quot;&gt;&lt;a href=&quot;#JavaScript的基本函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的基本函数&quot;&gt;&lt;/a&gt;JavaScript的基本函数&lt;/h1&gt;&lt;h2 id=&quot;函数的定义方法&quot;&gt;&lt;a href=&quot;#函数的定义方法&quot; class=&quot;headerlink&quot; title=&quot;函数的定义方法&quot;&gt;&lt;/a&gt;函数的定义方法&lt;/h2&gt;&lt;h3 id=&quot;1-静态方法&quot;&gt;&lt;a href=&quot;#1-静态方法&quot; class=&quot;headerlink&quot; title=&quot;1.静态方法&quot;&gt;&lt;/a&gt;1.静态方法
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的一些基本知识 -- DOM操作</title>
    <link href="http://yoursite.com/2017/03/02/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20DOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/03/02/JavaScript的一些基本知识 -- DOM操作/</id>
    <published>2017-03-02T11:18:01.000Z</published>
    <updated>2017-03-02T12:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dom基本操作"><a href="#Dom基本操作" class="headerlink" title="Dom基本操作"></a>Dom基本操作</h1><h2 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h2><h3 id="一、document"><a href="#一、document" class="headerlink" title="一、document"></a>一、document<a id="more"></a></h3><h4 id="1-querySelectorAll"><a href="#1-querySelectorAll" class="headerlink" title="1.querySelectorAll"></a>1.querySelectorAll</h4><p>根据CSS里面的选择器来获取一组元素(获取的是数组)<br>用法：<strong>document.querySelectorAll(“选择器”);</strong><br>选择器可以是后代选择器，群组选择器，nth-child(1)等等<br>获取的数组不会随着dom的操作发生变化而变化</p>
<h4 id="2-querySelector"><a href="#2-querySelector" class="headerlink" title="2.querySelector"></a>2.querySelector</h4><p>获取querySelectorAll获取到的第一个元素<br>用法：<strong>document.querySelector(“选择器”);</strong></p>
<h4 id="3-通过元素ID获取节点"><a href="#3-通过元素ID获取节点" class="headerlink" title="3.通过元素ID获取节点"></a>3.通过元素ID获取节点</h4><p>用法：<strong>document.getElementById(“元素ID”);</strong></p>
<h4 id="4-通过类名获取节点"><a href="#4-通过类名获取节点" class="headerlink" title="4.通过类名获取节点"></a>4.通过类名获取节点</h4><p>用法：<strong>document.getElementsByClassName(“元素类名”);</strong><br>通过类名获取节点(获取的是动态数组)<br>动态数组会跟随dom操作发生变化之后做出相应的变化</p>
<h4 id="5-通过元素标签名获取节点"><a href="#5-通过元素标签名获取节点" class="headerlink" title="5.通过元素标签名获取节点"></a>5.通过元素标签名获取节点</h4><p>用法：<strong>document.getElementsByTagName(“元素标签名”);</strong><br>通过元素标签名获取的也是动态数组</p>
<h4 id="6-通过name属性来获取节点"><a href="#6-通过name属性来获取节点" class="headerlink" title="6.通过name属性来获取节点"></a>6.通过name属性来获取节点</h4><p>用法：<strong>document.getElementsByName(“name值”);</strong><br>通过name属性获取的也是动态数组</p>
<h3 id="二、节点指针"><a href="#二、节点指针" class="headerlink" title="二、节点指针"></a>二、节点指针</h3><h4 id="1-获取元素的首个子节点"><a href="#1-获取元素的首个子节点" class="headerlink" title="1.获取元素的首个子节点"></a>1.获取元素的首个子节点</h4><p>用法：<strong>父节点.firstChild;</strong></p>
<h4 id="2-获取元素的最后一个子节点"><a href="#2-获取元素的最后一个子节点" class="headerlink" title="2.获取元素的最后一个子节点"></a>2.获取元素的最后一个子节点</h4><p>用法：<strong>父节点.lastChild;</strong></p>
<h4 id="3-获取元素的子节点列表"><a href="#3-获取元素的子节点列表" class="headerlink" title="3.获取元素的子节点列表"></a>3.获取元素的子节点列表</h4><p>用法：<strong>父节点.childNodes;</strong></p>
<h4 id="4-获取已知节点的前一个节点"><a href="#4-获取已知节点的前一个节点" class="headerlink" title="4.获取已知节点的前一个节点"></a>4.获取已知节点的前一个节点</h4><p>用法：<strong>兄弟节点.previousSibling;</strong></p>
<h4 id="5-获取已知节点的后一个节点"><a href="#5-获取已知节点的后一个节点" class="headerlink" title="5.获取已知节点的后一个节点"></a>5.获取已知节点的后一个节点</h4><p>用法：<strong>父节点.nextSibling;</strong></p>
<h4 id="6-获取已知节点的父节点"><a href="#6-获取已知节点的父节点" class="headerlink" title="6.获取已知节点的父节点"></a>6.获取已知节点的父节点</h4><p>用法：<strong>父节点.parentNode;</strong></p>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="一、创建节点"><a href="#一、创建节点" class="headerlink" title="一、创建节点"></a>一、创建节点</h3><h4 id="1-创建属性节点"><a href="#1-创建属性节点" class="headerlink" title="1.创建属性节点"></a>1.创建属性节点</h4><p>用法：<strong>document.createAttribute(“创建的元素属性”);</strong></p>
<h4 id="2-创建文本节点"><a href="#2-创建文本节点" class="headerlink" title="2.创建文本节点"></a>2.创建文本节点</h4><p>用法：<strong>document.createTextNode(“创建的文本内容”);</strong></p>
<h4 id="3-创建元素节点"><a href="#3-创建元素节点" class="headerlink" title="3.创建元素节点"></a>3.创建元素节点</h4><p>用法：<strong>document.createElement(“创建的元素标签名”);</strong></p>
<h3 id="二、删除节点"><a href="#二、删除节点" class="headerlink" title="二、删除节点"></a>二、删除节点</h3><p>删除指定的节点<br>用法：<strong>removeChild(要删除的节点名);</strong></p>
<h3 id="三、替换节点"><a href="#三、替换节点" class="headerlink" title="三、替换节点"></a>三、替换节点</h3><p>将某个子节点替换为另一个<br>用法：<strong>replaceChild(新节点, 原节点);</strong></p>
<h3 id="四、插入节点"><a href="#四、插入节点" class="headerlink" title="四、插入节点"></a>四、插入节点</h3><h4 id="1-向节点的子节点列表的末尾添加新的子节点"><a href="#1-向节点的子节点列表的末尾添加新的子节点" class="headerlink" title="1.向节点的子节点列表的末尾添加新的子节点"></a>1.向节点的子节点列表的末尾添加新的子节点</h4><p>用法：<strong>appendChild(所添加的新节点);</strong></p>
<h4 id="2-在已知的子节点前插入一个新的子节点"><a href="#2-在已知的子节点前插入一个新的子节点" class="headerlink" title="2.在已知的子节点前插入一个新的子节点"></a>2.在已知的子节点前插入一个新的子节点</h4><p>用法：<strong>insertBefore(新节点, 原节点)</strong></p>
<h3 id="五、复制节点"><a href="#五、复制节点" class="headerlink" title="五、复制节点"></a>五、复制节点</h3><p>复制节点标签<br>用法：<strong>cloneNode(bool);</strong><br>哪个节点调用就复制哪个，true代表深复制，会复制子节点树，false代表浅复制，只复制本身</p>
<h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><h3 id="一、获取属性"><a href="#一、获取属性" class="headerlink" title="一、获取属性"></a>一、获取属性</h3><p>获取元素节点中指定属性的属性值<br>用法：<strong>元素节点.getAttribute(元素属性名);</strong></p>
<h3 id="二、设置属性"><a href="#二、设置属性" class="headerlink" title="二、设置属性"></a>二、设置属性</h3><p>创建或改变元素节点的属性<br>用法：<strong>元素节点.setAttribute(属性名, 属性值);</strong></p>
<h3 id="三、删除属性"><a href="#三、删除属性" class="headerlink" title="三、删除属性"></a>三、删除属性</h3><p>删除元素中的指定属性<br>用法：<strong>元素节点.removeAttribute(属性名);</strong></p>
<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><h3 id="1-从指定的位置插入字符串"><a href="#1-从指定的位置插入字符串" class="headerlink" title="1.从指定的位置插入字符串"></a>1.从指定的位置插入字符串</h3><p>用法：<strong>insertData(offset, string);</strong></p>
<h3 id="2-从指定的位置起删除一些字符"><a href="#2-从指定的位置起删除一些字符" class="headerlink" title="2.从指定的位置起删除一些字符"></a>2.从指定的位置起删除一些字符</h3><p>用法：<strong>deleteData(offset, count);</strong></p>
<h3 id="3-将字符串插入到文本尾部"><a href="#3-将字符串插入到文本尾部" class="headerlink" title="3.将字符串插入到文本尾部"></a>3.将字符串插入到文本尾部</h3><p>用法：<strong>appendData(string);</strong></p>
<h3 id="4-从指定的位置起将文本节点分成两个节点"><a href="#4-从指定的位置起将文本节点分成两个节点" class="headerlink" title="4.从指定的位置起将文本节点分成两个节点"></a>4.从指定的位置起将文本节点分成两个节点</h3><p>用法：<strong>splitData(offset);</strong></p>
<h3 id="5-从指定的位置起将一些字符用其他字符串代替"><a href="#5-从指定的位置起将一些字符用其他字符串代替" class="headerlink" title="5.从指定的位置起将一些字符用其他字符串代替"></a>5.从指定的位置起将一些字符用其他字符串代替</h3><p>用法：<strong>replaceData(offset, count, string);</strong></p>
<h3 id="6-从指定的位置起返回一些节点"><a href="#6-从指定的位置起返回一些节点" class="headerlink" title="6.从指定的位置起返回一些节点"></a>6.从指定的位置起返回一些节点</h3><p>用法：<strong>substringData(offset, count);</strong><br><img src="http://olk97sdgv.bkt.clouddn.com/JavaScript-Dom.png" alt="Image"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中Dom的基础知识</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dom基本操作&quot;&gt;&lt;a href=&quot;#Dom基本操作&quot; class=&quot;headerlink&quot; title=&quot;Dom基本操作&quot;&gt;&lt;/a&gt;Dom基本操作&lt;/h1&gt;&lt;h2 id=&quot;获取节点&quot;&gt;&lt;a href=&quot;#获取节点&quot; class=&quot;headerlink&quot; title=&quot;获取节点&quot;&gt;&lt;/a&gt;获取节点&lt;/h2&gt;&lt;h3 id=&quot;一、document&quot;&gt;&lt;a href=&quot;#一、document&quot; class=&quot;headerlink&quot; title=&quot;一、document&quot;&gt;&lt;/a&gt;一、document
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的一些基本知识 -- 数组</title>
    <link href="http://yoursite.com/2017/03/01/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/03/01/JavaScript的一些基本知识 -- 数组/</id>
    <published>2017-03-01T12:35:35.000Z</published>
    <updated>2017-03-01T13:13:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的数组"><a href="#JavaScript的数组" class="headerlink" title="JavaScript的数组"></a>JavaScript的数组</h1><h2 id="数组的创建方法"><a href="#数组的创建方法" class="headerlink" title="数组的创建方法"></a>数组的创建方法</h2><h3 id="1-创建空数组"><a href="#1-创建空数组" class="headerlink" title="1.创建空数组"></a>1.创建空数组<a id="more"></a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div></pre></td></tr></table></figure>
<h3 id="2-创建指定元素的数组"><a href="#2-创建指定元素的数组" class="headerlink" title="2.创建指定元素的数组"></a>2.创建指定元素的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素<span class="number">1</span>, 元素<span class="number">2</span>…);</div></pre></td></tr></table></figure>
<h3 id="3-单维数组"><a href="#3-单维数组" class="headerlink" title="3.单维数组"></a>3.单维数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [元素<span class="number">1</span>, 元素<span class="number">2.</span>..];</div></pre></td></tr></table></figure>
<h3 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>([数组<span class="number">1</span>], [数组<span class="number">2</span>]…);</div></pre></td></tr></table></figure>
<h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p><strong>array.length</strong>返还数组的长度</p>
<h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p><strong>注意：数字的下标是从0开始计算的！</strong></p>
<h4 id="单维数组"><a href="#单维数组" class="headerlink" title="单维数组"></a>单维数组</h4><p>数组名[下标索引值]</p>
<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>数组名[外层下标索引值][内层下标索引值]</p>
<h3 id="增加数组"><a href="#增加数组" class="headerlink" title="增加数组"></a>增加数组</h3><p>使用“[]”指定一个新的下标</p>
<h3 id="删除数组"><a href="#删除数组" class="headerlink" title="删除数组"></a>删除数组</h3><p>delete 数组名[下标];</p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>使用for…in…来遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">Array</span>)</div></pre></td></tr></table></figure></p>
<h2 id="数组的一些方法"><a href="#数组的一些方法" class="headerlink" title="数组的一些方法"></a>数组的一些方法</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><h4 id="1-在数组末尾添加数组"><a href="#1-在数组末尾添加数组" class="headerlink" title="1.在数组末尾添加数组"></a>1.在数组末尾添加数组</h4><p><strong>push();</strong></p>
<h4 id="2-在数组头部添加数组"><a href="#2-在数组头部添加数组" class="headerlink" title="2.在数组头部添加数组"></a>2.在数组头部添加数组</h4><p><strong>unshift();</strong></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="1-从数组头部删除一个元素"><a href="#1-从数组头部删除一个元素" class="headerlink" title="1.从数组头部删除一个元素"></a>1.从数组头部删除一个元素</h4><p><strong>shift();</strong></p>
<h4 id="2-从数组尾部删除一个元素"><a href="#2-从数组尾部删除一个元素" class="headerlink" title="2.从数组尾部删除一个元素"></a>2.从数组尾部删除一个元素</h4><p><strong>pop();</strong></p>
<h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p><strong>slice(起始位置, 结束位置);</strong>两个参数分别代表要获取的数组的起始位置和结束位置。可以用-1代表倒数第一个，-2代表倒数第二个</p>
<h3 id="splice方法"><a href="#splice方法" class="headerlink" title="splice方法"></a>splice方法</h3><h4 id="①-splice-起始位置，删除的长度"><a href="#①-splice-起始位置，删除的长度" class="headerlink" title="①.splice(起始位置，删除的长度)"></a>①.splice(起始位置，删除的长度)</h4><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = [<span class="number">90</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">54</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">76</span>];</div><div class="line">math.splice(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(math); <span class="comment">// 打印结果为[30, 45, 54, 98, 66, 76]</span></div></pre></td></tr></table></figure></p>
<h4 id="②-splice-起始位置-删除长度为0-要添加的元素1-要添加的元素2…-）"><a href="#②-splice-起始位置-删除长度为0-要添加的元素1-要添加的元素2…-）" class="headerlink" title="②.splice(起始位置,删除长度为0,要添加的元素1,要添加的元素2…..）"></a>②.splice(起始位置,删除长度为0,要添加的元素1,要添加的元素2…..）</h4><p>例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = [<span class="number">90</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">54</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">76</span>];</div><div class="line">math.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">12</span>,<span class="number">65</span>);</div><div class="line"><span class="built_in">console</span>.log(math); [<span class="number">10</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">54</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">76</span>]</div></pre></td></tr></table></figure></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序不按照数值大小，而是把元素看出一个字符串，按照首字母来排<strong>sort();</strong><br>将数组中元素的顺序颠倒<strong>reverse();</strong></p>
<h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p><strong>concat();</strong>数组拼接，数组不会在原有的数组上进行拼接，而是返回一个拼接之后的新数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">var</span> test2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="keyword">var</span> a = test.concat(test2);</div><div class="line"><span class="built_in">console</span>.log(test);  <span class="comment">// [1, 2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(test2); <span class="comment">// [4, 5, 6]</span></div><div class="line"><span class="built_in">console</span>.log(a);     <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure></p>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>使用数组的<strong>join();</strong>方法，可以把这个数组用一个字符串来连接起来，然后返回一个新的字符串，原来的数组不会发生变化。</p>
<h2 id="数组小结"><a href="#数组小结" class="headerlink" title="数组小结"></a>数组小结</h2><p><img src="http://olk97sdgv.bkt.clouddn.com/jsArray.png" alt="博主自己整理的JavaScript数组的知识"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中数组的知识</span></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><strong>数组直接赋值的时候是-地址引用</strong><br><strong>基本数据类型赋值是-值拷贝</strong><br><strong>对象类型赋值是-地址引用</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的数组&quot;&gt;&lt;a href=&quot;#JavaScript的数组&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的数组&quot;&gt;&lt;/a&gt;JavaScript的数组&lt;/h1&gt;&lt;h2 id=&quot;数组的创建方法&quot;&gt;&lt;a href=&quot;#数组的创建方法&quot; class=&quot;headerlink&quot; title=&quot;数组的创建方法&quot;&gt;&lt;/a&gt;数组的创建方法&lt;/h2&gt;&lt;h3 id=&quot;1-创建空数组&quot;&gt;&lt;a href=&quot;#1-创建空数组&quot; class=&quot;headerlink&quot; title=&quot;1.创建空数组&quot;&gt;&lt;/a&gt;1.创建空数组
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的一些基本知识 -- 字符串</title>
    <link href="http://yoursite.com/2017/02/28/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2017/02/28/JavaScript的一些基本知识 -- 字符串/</id>
    <published>2017-02-28T12:43:27.000Z</published>
    <updated>2017-03-02T12:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的字符串"><a href="#JavaScript的字符串" class="headerlink" title="JavaScript的字符串"></a>JavaScript的字符串</h1><h2 id="转化为字符串"><a href="#转化为字符串" class="headerlink" title="转化为字符串"></a>转化为字符串</h2><p><strong>toString();</strong><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var num = 10;</div><div class="line">var str = num.toString();</div></pre></td></tr></table></figure></p>
<h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var str = new String(&quot;123456&quot;);</div></pre></td></tr></table></figure>
<h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><h3 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1.charAt"></a>1.charAt</h3><p><strong>charAt();</strong>去字符串里面寻找下标为括号内传入的参数的字符，从零开始，空格也算做字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">console.log(str.charAt(15)); // 打印结果为m</div></pre></td></tr></table></figure></p>
<h3 id="2-search"><a href="#2-search" class="headerlink" title="2.search"></a>2.search</h3><p><strong>search();</strong><br>在字符串中，搜索某个单词，然后返回这个单词在字符串中首字母的位置，搜索不到返回 -1，出现多个匹配的字符串之后，只返回第一个的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">console.log(str.search(&quot;you&quot;)); // 打印结果为8</div></pre></td></tr></table></figure></p>
<h3 id="3-indexOf"><a href="#3-indexOf" class="headerlink" title="3.indexOf"></a>3.indexOf</h3><p><strong>indexOf();</strong><br>从前往后获取字符串的位置，如果没有则返回-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;adssddsssdfsa&quot;;</div><div class="line">console.log(str.indexOf(&quot;a&quot;)); // 打印结果为0</div></pre></td></tr></table></figure></p>
<h3 id="4-lastIndexOf"><a href="#4-lastIndexOf" class="headerlink" title="4.lastIndexOf"></a>4.lastIndexOf</h3><p><strong>lastIndexOf();</strong><br>从后往前从前往后获取字符串的位置，如果没有则返回-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;adssddsssdfsa&quot;;</div><div class="line">console.log(str.lastIndexOf(&quot;a&quot;)); // 打印结果为12</div></pre></td></tr></table></figure></p>
<h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><p><strong>substring(起始位置, 结束位置);</strong><br>截取字符串，给一个参数的时候代表，从这个位置开始，截取到字符串结束。给两个参数的时候，一个代表起始位置，一个代表结束位置(不包含最后一个位置)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">var str2 = str.substring(4, 11);</div><div class="line">console.log(str2); // 打印结果为are you</div></pre></td></tr></table></figure></p>
<h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><p><strong>substr(起始位置, 截取长度);</strong><br>截取字符串，第一个参数代表其实位置，第二个字符串代表截取的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">var str2 = str.substr(4, 7);</div><div class="line">console.log(str2); // 打印结果为are you</div></pre></td></tr></table></figure></p>
<h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p><strong>replace(替换的值, 被替换的值);</strong><br>字符串替换，把前面的替换成后面的，只会替换第一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">var str2 = str.replace(&quot;you&quot;, &quot;ni&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p><strong>split();</strong><br>把一个字符串按照参数分割成N个元素的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">var str2 = str.split(&quot;,&quot;); // 打印结果为[&quot;how are you&quot;, &quot; i&apos;m fine thank you&quot;, &quot; and you&quot;]</div></pre></td></tr></table></figure></p>
<h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><strong>concat();</strong><br>将一个字符串或多个字符串拼接起来，获得一个新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;</div><div class="line">var str2 = &quot;--------Hello!&quot;;</div><div class="line">console.log(str.concat(str2)); // 打印结果为how are you, i&apos;m fine thank you, and you--------Hello!</div></pre></td></tr></table></figure></p>
<h2 id="字符串的转换方式"><a href="#字符串的转换方式" class="headerlink" title="字符串的转换方式"></a>字符串的转换方式</h2><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h3><p><strong>toLowerCase();</strong><br>方法返回一个字符串，该字符串中的字母被转换成小写。</p>
<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h3><p><strong>toUpperCase();</strong><br>方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。</p>
<h2 id="字符串小结"><a href="#字符串小结" class="headerlink" title="字符串小结"></a>字符串小结</h2><p><img src="http://olk97sdgv.bkt.clouddn.com/JavaScript-Basics/JS-string.png" alt="Image"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中字符串的知识</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的字符串&quot;&gt;&lt;a href=&quot;#JavaScript的字符串&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的字符串&quot;&gt;&lt;/a&gt;JavaScript的字符串&lt;/h1&gt;&lt;h2 id=&quot;转化为字符串&quot;&gt;&lt;a href=&quot;#转化为字符串&quot; class=&quot;headerlink&quot; title=&quot;转化为字符串&quot;&gt;&lt;/a&gt;转化为字符串&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;toString();&lt;/strong&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax的探索</title>
    <link href="http://yoursite.com/2017/02/24/Ajax%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://yoursite.com/2017/02/24/Ajax的探索/</id>
    <published>2017-02-24T13:24:39.000Z</published>
    <updated>2017-02-24T13:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h1><p>Ajax的全称是Asynchronous JavaScript And XML(异步Javascript和XML)。它不是<br>一项新的技术，而是由多种技术组合而成。<a id="more"></a></p>
<h1 id="Ajax的关键技术"><a href="#Ajax的关键技术" class="headerlink" title="Ajax的关键技术"></a>Ajax的关键技术</h1><p>1.Javascript脚本语言<br>2.XMLHttpRequest对象<br>3.可扩展标记语言(XML) JSON<br>4.文档对象模型(DOM)<br>5.层叠样式表(CSS)</p>
<h1 id="前后台通讯"><a href="#前后台通讯" class="headerlink" title="前后台通讯"></a>前后台通讯</h1><p>封装一个Ajax的方法这里名字为GetAndPost.js<br>内容展示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">function toUrl(url,data)&#123;</div><div class="line">	var time = new Date().getTime();</div><div class="line">	data.time = time;</div><div class="line">	var arr = []; ///存储经过遍历之后形成的名和值的字符串</div><div class="line"></div><div class="line">	for(var i in data)&#123;</div><div class="line">		var str = i + &quot;=&quot; + data[i];</div><div class="line">		arr.push(str);</div><div class="line">	&#125;</div><div class="line">	var str = arr.join(&quot;&amp;&quot;);</div><div class="line">	var path = url + &quot;?&quot; + str;</div><div class="line">	return path;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function fnAjax(obj)&#123;</div><div class="line">	// 兼容浏览器写法</div><div class="line">	if (window.XMLHttpRequest) &#123;</div><div class="line">		var ajax = new XMLHttpRequest();</div><div class="line">	&#125; else &#123;</div><div class="line">		var ajax = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	var data = obj.data || &#123;&#125;;</div><div class="line">	var succFn = obj.succFn || false;</div><div class="line">	var failFn = obj.failFn || false;</div><div class="line"></div><div class="line">	var path = toUrl(obj.url,data);</div><div class="line">	var pathArr = path.split(&quot;?&quot;);</div><div class="line">	var time = new Date().getTime();</div><div class="line">	var type = obj.type || &quot;get&quot;;</div><div class="line">	</div><div class="line">	if (type == &quot;get&quot;) &#123;</div><div class="line">		ajax.open(&quot;GET&quot;, path, true);</div><div class="line">		ajax.send(null);</div><div class="line">	&#125; else &#123;</div><div class="line">		ajax.open(&quot;POST&quot;, pathArr[0], true);</div><div class="line">		ajax.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</div><div class="line">		ajax.send(pathArr[1]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 对状态的检测</div><div class="line">	ajax.onreadystatechange = function()&#123;</div><div class="line">//		console.log(ajax.readyState);  //当前的请求状态</div><div class="line">		if (ajax.readyState == 4) &#123;</div><div class="line">			// console.log(&quot;请求成功了&quot;);</div><div class="line">			// console.log(ajax.status);  //请求结果的状态码</div><div class="line">			if (ajax.status &gt;= 200 &amp;&amp; ajax.status &lt;= 207 || ajax.status == 304) &#123;</div><div class="line">				if (succFn) &#123;</div><div class="line">					succFn(ajax.responseText);</div><div class="line">				&#125;</div><div class="line">			&#125; else &#123;</div><div class="line">				if (failFn) &#123;</div><div class="line">					failFn(ajax.status);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Ajax&quot;&gt;&lt;a href=&quot;#什么是Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是Ajax&quot;&gt;&lt;/a&gt;什么是Ajax&lt;/h1&gt;&lt;p&gt;Ajax的全称是Asynchronous JavaScript And XML(异步Javascript和XML)。它不是&lt;br&gt;一项新的技术，而是由多种技术组合而成。
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础(四)</title>
    <link href="http://yoursite.com/2017/02/24/PHP%E5%9F%BA%E7%A1%80(%E5%9B%9B)/"/>
    <id>http://yoursite.com/2017/02/24/PHP基础(四)/</id>
    <published>2017-02-24T12:16:05.000Z</published>
    <updated>2017-02-24T13:18:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP的文件上传"><a href="#PHP的文件上传" class="headerlink" title="PHP的文件上传"></a>PHP的文件上传</h1><p>这里还是举例子说明<br>创建两个页面，一个<strong style="color: #ff620c;">fileup.html</strong>和一个<strong style="color: #ff620c;">fileup.php</strong><br>fileup.html代码如下：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">		&lt;title&gt;文件上传&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;!--enctype是设置编码格式的--&gt;</div><div class="line">		&lt;form action=&quot;fileup.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">			&lt;!--限制上传的最大大小--&gt;</div><div class="line">			&lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; id=&quot;MAX_FILE_SIZE&quot; value=&quot;300000&quot; /&gt;</div><div class="line">			&lt;input type=&quot;file&quot; name=&quot;fileup&quot; /&gt;</div><div class="line">			&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>fileup.php代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	date_default_timezone_set(&apos;PRC&apos;); // 设置默认时区</div><div class="line">	$file = $_FILES[&quot;fileup&quot;];</div><div class="line">	// 根据错误码，判断是否上传成功</div><div class="line">	if ($file[&quot;error&quot;] == 0) &#123;</div><div class="line">		// 根据类型判断是图片还是其他</div><div class="line">		$imgArr = array(&quot;image/jpeg&quot;,&quot;image/png&quot;,&quot;image/gif&quot;);</div><div class="line">		if (in_array($file[&quot;type&quot;], $imgArr)) &#123;</div><div class="line">			$type = explode(&quot;/&quot;, $file[&quot;type&quot;])[1];</div><div class="line">			if ($type == &quot;jpeg&quot;) &#123;</div><div class="line">				$type = &quot;jpg&quot;;</div><div class="line">			&#125;</div><div class="line">			$time = time(); // 时间戳，以秒为单位</div><div class="line">			$time = date(&quot;YmdHis&quot;, $time); // 设置显示时间的格式</div><div class="line">			// 若要放到其他文件夹</div><div class="line">			$name = &quot;../2.21php4/&quot;.$time.&quot;.&quot;.$type;</div><div class="line">			$bol = move_uploaded_file($file[&quot;tmp_name&quot;], $name);</div><div class="line">			if ($bol) &#123;</div><div class="line">				echo &quot;移至服务器成功&quot;;</div><div class="line">			&#125; else &#123;</div><div class="line">				echo &quot;移至失败&quot;;</div><div class="line">			&#125;</div><div class="line">		&#125; else &#123;</div><div class="line">			echo &quot;不是图片&quot;;</div><div class="line">		&#125;</div><div class="line">	&#125; else &#123;</div><div class="line">		echo &quot;上传失败&quot;;</div><div class="line">	&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h1 id="PHP的正则表达式"><a href="#PHP的正则表达式" class="headerlink" title="PHP的正则表达式"></a>PHP的正则表达式</h1><h2 id="查找匹配"><a href="#查找匹配" class="headerlink" title="查找匹配"></a>查找匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$reg = &quot;/\d+/&quot;;</div><div class="line">$str = &quot;asda4 244g h64 485 14&quot;;</div><div class="line">echo preg_match($reg, $str); // 返回匹配的次数</div><div class="line">echo preg_match_all($reg, $str); // 返回匹配次数，多次匹配</div></pre></td></tr></table></figure>
<h2 id="替换匹配"><a href="#替换匹配" class="headerlink" title="替换匹配"></a>替换匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$reg = &quot;/\d+/&quot;;</div><div class="line">$str = &quot;asda4 244g h64 485 14&quot;;</div><div class="line">$str = preg_replace($reg, &quot;*&quot;, $str);</div></pre></td></tr></table></figure>
<h2 id="分隔字符串"><a href="#分隔字符串" class="headerlink" title="分隔字符串"></a>分隔字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$reg = &quot;/\d+/&quot;;</div><div class="line">$str = &quot;asda4 244g h64 485 14&quot;;</div><div class="line">$arr = preg_split(&quot;/\s/&quot;, $str);</div><div class="line">var_dump($arr);</div></pre></td></tr></table></figure>
<h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><p>返回数组中能与正则进行匹配的每一项，并以数组进行输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$arr = array(&quot;514ada&quot;, &quot;Asda5a153&quot;,&quot;awda6531&quot;);</div><div class="line">$str = preg_grep(&quot;/\d+/&quot;, $arr);</div><div class="line">var_dump($str);</div></pre></td></tr></table></figure></p>
<h1 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h1><p>PS：博主用的是XAMPP自带集成的MySql</p>
<h2 id="第一步-连接数据库"><a href="#第一步-连接数据库" class="headerlink" title="第一步 连接数据库"></a>第一步 连接数据库</h2><p>参数分别为主机名，用户名，密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$mysql = mysql_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;);</div><div class="line">if (!$mysql) &#123;</div><div class="line">	echo &quot;连接失败&quot;;</div><div class="line">	exit(); // 退出后面的执行</div><div class="line">&#125; else &#123;</div><div class="line">	echo &quot;连接成功&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="第二步-选择需要的数据库"><a href="#第二步-选择需要的数据库" class="headerlink" title="第二步 选择需要的数据库"></a>第二步 选择需要的数据库</h2><p><pre><br>mysql_select_db(“20170222”); // 数据库名<br>mysql_query(“set <strong style="color: #ff620c;">names</strong> utf8”); // 编码格式设置为utf-8<br></pre></p>
<h2 id="第三步-进行增删改的操作"><a href="#第三步-进行增删改的操作" class="headerlink" title="第三步 进行增删改的操作"></a>第三步 进行增删改的操作</h2><h3 id="1）查询语句"><a href="#1）查询语句" class="headerlink" title="1）查询语句"></a>1）查询语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// SELECT（字段名） FROM （数据表名）（查询的限制条件）</div><div class="line">$sql = &quot;SELECT * FROM userinfo&quot;;</div><div class="line">// 限制条件有WHERE语句，LIMIT语句，ORDER BY语句</div><div class="line">// 例：$sql = &quot;SELECT * FROM userinfo WHERE id=3&quot;;</div><div class="line">// $sql = &quot;SELECT * FROM userinfo LIMIT 1, 2&quot;; 1表示从第二条查找，2表示查找出来两条</div><div class="line">// $sql = &quot;SELECT * FROM userinfo ORDER BY age asc&quot;; 按照年龄升序，asc是默认的升序</div><div class="line">$result = mysql_query($sql);</div></pre></td></tr></table></figure>
<h3 id="2）-插入语句"><a href="#2）-插入语句" class="headerlink" title="2） 插入语句"></a>2） 插入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;INSERT INTO userinfo (id, user, pass, age, sex) VALUES (NULL, &apos;测试&apos;, &apos;test&apos; , 100, &apos;男&apos;)&quot;;</div></pre></td></tr></table></figure>
<h3 id="3）-更新语句"><a href="#3）-更新语句" class="headerlink" title="3） 更新语句"></a>3） 更新语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;UPDATE userinfo SET username = &apos;admin1&apos;, passwd =&apos;12345678&apos;  WHERE id = 10;</div></pre></td></tr></table></figure>
<h3 id="4）-删除语句"><a href="#4）-删除语句" class="headerlink" title="4） 删除语句"></a>4） 删除语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;DELETE FROM user WHERE id = 10&quot;;</div></pre></td></tr></table></figure>
<h2 id="第四步-对操作结果进行处理"><a href="#第四步-对操作结果进行处理" class="headerlink" title="第四步 对操作结果进行处理"></a>第四步 对操作结果进行处理</h2><h3 id="1）-以索引数组的形式输出"><a href="#1）-以索引数组的形式输出" class="headerlink" title="1） 以索引数组的形式输出"></a>1） 以索引数组的形式输出</h3><p><pre><br>while ($arr = mysql_fetch_<strong style="color: #ff620c;">row</strong>($result)) {<br>    var_dump($arr);<br>}<br></pre></p>
<h3 id="2）-以关联数组形式进行返回"><a href="#2）-以关联数组形式进行返回" class="headerlink" title="2） 以关联数组形式进行返回"></a>2） 以关联数组形式进行返回</h3><p><pre><br>while ($arr = mysql_fetch_<strong style="color: #ff620c;">assoc</strong>($result)) {<br>    var_dump($arr);<br>}<br></pre></p>
<h3 id="3）-以关联数组和索引数组的形式输出"><a href="#3）-以关联数组和索引数组的形式输出" class="headerlink" title="3） 以关联数组和索引数组的形式输出"></a>3） 以关联数组和索引数组的形式输出</h3><p><pre><br>while ($arr = mysql_fetch_<strong style="color: #ff620c;">array</strong>($result)) {<br>    var_dump($arr);<br>}<br></pre></p>
<h3 id="4）-以对象的形式进行输出"><a href="#4）-以对象的形式进行输出" class="headerlink" title="4） 以对象的形式进行输出"></a>4） 以对象的形式进行输出</h3><p><pre><br>while ($obj = mysql_fetch_<strong style="color: #ff620c;">object</strong>($result)) {<br>    var_dump($arr);<br>}<br></pre></p>
<h2 id="第五步-关闭数据库"><a href="#第五步-关闭数据库" class="headerlink" title="第五步 关闭数据库"></a>第五步 关闭数据库</h2><p><code>mysql_close();</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP的文件上传&quot;&gt;&lt;a href=&quot;#PHP的文件上传&quot; class=&quot;headerlink&quot; title=&quot;PHP的文件上传&quot;&gt;&lt;/a&gt;PHP的文件上传&lt;/h1&gt;&lt;p&gt;这里还是举例子说明&lt;br&gt;创建两个页面，一个&lt;strong style=&quot;color: #ff620c;&quot;&gt;fileup.html&lt;/strong&gt;和一个&lt;strong style=&quot;color: #ff620c;&quot;&gt;fileup.php&lt;/strong&gt;&lt;br&gt;fileup.html代码如下：
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>mac搭建一个属于自己的hexo博客(github page)</title>
    <link href="http://yoursite.com/2017/02/22/mac%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/22/mac搭建一个属于自己的hexo博客/</id>
    <published>2017-02-22T07:11:17.000Z</published>
    <updated>2017-02-24T11:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-本地环境的安装"><a href="#1-本地环境的安装" class="headerlink" title="1.本地环境的安装"></a>1.本地环境的安装</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js的官网</a></p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><a href="https://git-scm.com/" target="_blank" rel="external">git的官网</a><a id="more"></a></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>hexo是基于node.js的静态博客。<br>在你想创建博客的路径下创建一个blog文件夹（这里文件名随意）。<br>然后打开MAC电脑的终端，进入到这个文件夹<br>(博主是创在根目录下所以直接cd blog就能进入)<br>接着输入<code>$ sudo npm install -g hexo</code>;<br>此时hexo已经装好了，再输入<code>$ hexo init</code>初始化文件夹<br>会将github上的所有hexo的初始化项目下载到该文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Start blogging with Hexo!</div></pre></td></tr></table></figure></p>
<p>显示这行代码就说明初始化成功了<br>此时我们可以先试一下输入<code>$hexo g</code>部署形成文件<br>然后等它部署好之后再输入<code>$hexo s</code>开启本地测试（退出就按Ctrl+C）<br>此时打开浏览器输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，可以进行查看我们的初始页面<br>效果如下：<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog.png" alt="Image"><br><strong>至此，我们的环境都已经安装完成了，让我们进行下一步吧！</strong></p>
<h1 id="2-注册github"><a href="#2-注册github" class="headerlink" title="2.注册github"></a>2.注册github</h1><p>如果已经有账号了可以直接往下看，<br>打开<a href="https://github.com/" target="_blank" rel="external">github官网</a>进行注册登录<br>登录之后出现如下界面，点击Start a project<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog2.png" alt="Image"><br>然后在Repository name中填入你的Owner的用户名在加上.github.io，然后这就是你的域名了（这里由于博主已经创建过一个一样的库了所以提示错误），然后点击下面的按钮<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog3.png" alt="Image"><br>接着点击页面右上角你的头像选择your profile进入下面页面，选择刚才创建的库<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog4.png" alt="Image"><br>进入之后选择Settings选项卡，下拉至GitHub Pages栏目中将Source里选择master branch，如果已经是这个选项，就不需要更改<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog5.png" alt="Image"></p>
<h1 id="3-配置Github-SSH-keys"><a href="#3-配置Github-SSH-keys" class="headerlink" title="3.配置Github SSH keys"></a>3.配置Github SSH keys</h1><p>我们需要给我们的MAC添加SSH Keys，让Github能够绑定到我们这台电脑上，能够直接提交传送修改项目。</p>
<h2 id="①-首先先查看一下本机是否有过SSH-KEY的设置"><a href="#①-首先先查看一下本机是否有过SSH-KEY的设置" class="headerlink" title="①.首先先查看一下本机是否有过SSH KEY的设置"></a><b>①.首先先查看一下本机是否有过SSH KEY的设置</b></h2><p>在终端输入cd ~/.ssh 或cd .ssh<br>如果是第一次设置则会显示<code>No such file or directory</code><br>如果有配置过则进入~/.ssh路径下输入ls查看当前路径文件，再用rm*删除所有文件</p>
<h2 id="②-设置SSH-KEY"><a href="#②-设置SSH-KEY" class="headerlink" title="②.设置SSH KEY"></a><b>②.设置SSH KEY</b></h2><p>在终端中进行如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ cd ~  #保证当前路径在”~”下</div><div class="line">$ ssh-keygen -t rsa -C &quot;xxxxx@xx.xxx&quot; #引号里将xxx换成你注册的邮箱地址</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车</div><div class="line">Enter passphrase (empty for no passphrase):   #输入密码（可以为空）</div><div class="line">Enter same passphrase again:   #再次确认密码（可以为空）</div><div class="line">Your identification has been saved in /Users/xxxx/.ssh/id_rsa.   #生成的密钥</div><div class="line">Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub.  #生成的公钥</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:plEUOl2Syg3KprBZYAwCuxa7V2ELo2GqCaAg3ERnY0M xxxxxxx@xxx.xxx</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|B .o.E  +o.      |</div><div class="line">|++o + ++.o       |</div><div class="line">|** = =o+o        |</div><div class="line">|O.* B =o.        |</div><div class="line">|=O o o. S        |</div><div class="line">|*.o .  +         |</div><div class="line">|o. .  .          |</div><div class="line">|  .              |</div><div class="line">|                 |</div><div class="line">+----[SHA256]-----+</div><div class="line">$ vim ~/.ssh/id_rsa.pub  #编译代码 将上面图形转换成代码</div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+7F3/3/gA6GFwKyhIONc+fZu5Re/</div><div class="line">Y2SzeGRNbg/qxxxx5KrQw/</div><div class="line">JxxxA2qh7xxxxxxxxxxxxpXBiIn+7MI4Pfd9ZaUFfjQ7fQPNhZ1gs1GFtLXTaJ2RAvnBY6</div><div class="line">/hqPxkQqp8qkOaEbUtyrKciW+YXs/Qux/d2hnwj3F/</div><div class="line">dvfQ5JjFlbBNydkNJKat3wU7BKL5TIffMPzdnL/</div><div class="line">Ir5y0h5apcp4l0wruQzkXKHcMgI4ltYqOscqu4nawzZII3wiwxAcFd+0BeboCs+BP7U/</div><div class="line">iXpKyxOa9Br8sFMU/q7O/i7RcBufEg5W9wxkWB3i0QRmRyctLOj8yvXCBM4KnL6Amz </div><div class="line">xxxxxx@xxxx.xxxx</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line"># 这是已经生成好ssh key，其存放路径为：/Users/你电脑的用户名/.ssh/下。</div><div class="line"># 可以直接将ssh-rsa至@xxxx.xxxx这一大段复制下来</div></pre></td></tr></table></figure></p>
<h2 id="③-绑定Github上的SSH-KEY"><a href="#③-绑定Github上的SSH-KEY" class="headerlink" title="③.绑定Github上的SSH KEY"></a><b>③.绑定Github上的SSH KEY</b></h2><p>返回刚才的Github页面点击右上角的头像边上的小三角选择Settings<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog6.png" alt="Image"><br>在左侧选择SSH and GPG Keys栏，然后点击News SSH Key<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog7.png" alt="Image"><br>Title里可以自定义填入，Key里就把之前从”ssh-rsa至xxxxx@xxxx.xxxx”这一大串复制进去，然后点击Add SSH Key即可添加完成<br><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog8.png" alt="Image"></p>
<h2 id="④-配置用户名和邮箱"><a href="#④-配置用户名和邮箱" class="headerlink" title="④.配置用户名和邮箱"></a><b>④.配置用户名和邮箱</b></h2><p>返回终端进行如下操作设置你的用户名和邮箱地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name “your_username”  #引号里设置用户名</div><div class="line">$ git config --global user.email “your_registered_github_Email” #引号里设置设置邮箱地址(建议用注册giuhub的邮箱)</div></pre></td></tr></table></figure></p>
<h2 id="⑤-检测SSH-Key是否配置成功"><a href="#⑤-检测SSH-Key是否配置成功" class="headerlink" title="⑤.检测SSH Key是否配置成功"></a><b>⑤.检测SSH Key是否配置成功</b></h2><p>在终端输入<code>$ssh -T git@github.com</code>出现如下字段则说明配置成功<br><code>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</code><br>至此我们已经完成了与github的绑定</p>
<h1 id="4-设置hexo博客的配置文件"><a href="#4-设置hexo博客的配置文件" class="headerlink" title="4.设置hexo博客的配置文件"></a>4.设置hexo博客的配置文件</h1><p>找到你创建的博客的位置，打开其文件夹下的<span style="color: #e8000f">_config.yml</span>文件<br>将其拉到最后找到<span style="color: #e8000f">deploy</span>字段，进行如下设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/你自己的Github用户名//你自己的Github用户名/.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p> 如果想了解更多可以查看<a href="https://hexo.io/" target="_blank" rel="external">hexo官网</a></p>
<h1 id="5-上传博客"><a href="#5-上传博客" class="headerlink" title="5.上传博客"></a>5.上传博客</h1><p>这里我们需要安装一下git的上传代码插件<br>进入终端输入<code>$ npm install hexo-deployer-git --save</code><br>接着我们就可以上传我们的博客了<br>依次输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$hexo clean #清除网页的缓存</div><div class="line">$hexo g #生成静态页面至public目录</div><div class="line">$hexo s #会开通本地测试的接口</div><div class="line">$hexo d #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure></p>
<p>如果最后出现<code>INFO  Deploy done: git</code>则说明上传成功</p>
<p>此时就大功告成了！你可以去打开浏览器访问一下你创建的Github pages地址(你的Github用户名.github.io)，然后就能够看到你本地的hexo博客已经被部署到github上去了。而且此时博客的默认主题是landscape，就是之前本地测试时的样子，如果想要更换主题可以访问<a href="https://hexo.io/themes/" target="_blank" rel="external">hexo的主题</a></p>
<h1 id="6-发布文章"><a href="#6-发布文章" class="headerlink" title="6.发布文章"></a>6.发布文章</h1><p>在终端输入<code>$hexo new &quot;文章名&quot;</code><br>然后就能看到在你博客文件夹下的/source/_posts/下面会看到你新建的博客<br>注意这里的博客是markdown格式的以.md为后缀名的文件，如果想学习下怎么使用可以查询一下markdown的书写格式，同时markdown也是兼容html的书写方式。<br>文章写完之后在终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$hexo g</div><div class="line">$hexo d</div></pre></td></tr></table></figure></p>
<p>重新发布即可！</p>
<h1 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h1><p><img src="http://olk97sdgv.bkt.clouddn.com/hexo-blog9.png" alt="Image"><br><span style="display: block; text-align: center; margin-top: -25px; font-size: 12px;">博主整理了下全部流程</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-本地环境的安装&quot;&gt;&lt;a href=&quot;#1-本地环境的安装&quot; class=&quot;headerlink&quot; title=&quot;1.本地环境的安装&quot;&gt;&lt;/a&gt;1.本地环境的安装&lt;/h1&gt;&lt;h2 id=&quot;安装node-js&quot;&gt;&lt;a href=&quot;#安装node-js&quot; class=&quot;headerlink&quot; title=&quot;安装node.js&quot;&gt;&lt;/a&gt;安装node.js&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js的官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git的官网&lt;/a&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>PHP制作一个用户登记表</title>
    <link href="http://yoursite.com/2017/02/22/PHP%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E7%99%BB%E8%AE%B0%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/02/22/PHP制作一个用户登记表/</id>
    <published>2017-02-22T02:14:04.000Z</published>
    <updated>2017-02-22T03:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 id="展示单行的用户信息表">展示单行的用户信息表</h1><br>首先我们需要创建两个文件，一个为html文件，一个为php文件。<br>这里博主就创建了form.html和formHandle.php两个文件。<a id="more"></a><br>下面展示一下两个文件的内容：<br><strong style="color: #ff620c;">form.html的文件内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt;</div><div class="line">			用户名：&lt;input type=&quot;text&quot; name=&quot;user&quot; value=&quot;&quot; /&gt;&lt;br/&gt;</div><div class="line">			密码：&lt;input type=&quot;password&quot; name=&quot;pass&quot; value=&quot;&quot; /&gt;&lt;br/&gt;</div><div class="line">			性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;0&quot; /&gt;男</div><div class="line">			&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;1&quot; /&gt;女&lt;br/&gt;</div><div class="line">			兴趣：&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;0&quot; /&gt;写代码</div><div class="line">			&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;1&quot; /&gt;修改代码</div><div class="line">			&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;2&quot; /&gt;上传代码&lt;br/&gt;</div><div class="line">			城市：&lt;select name=&quot;city&quot;&gt;</div><div class="line">				&lt;option value=&quot;0&quot;&gt;上海&lt;/option&gt;</div><div class="line">				&lt;option value=&quot;1&quot;&gt;杭州&lt;/option&gt;</div><div class="line">			&lt;/select&gt;&lt;br/&gt;</div><div class="line">			简介：&lt;textarea name=&quot;intro&quot;&gt;&lt;/textarea&gt;&lt;br/&gt;</div><div class="line">			&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p></p>
<p>效果展示：<img src="http://olk97sdgv.bkt.clouddn.com/PHP-form3.png" alt="Image"><br><span>这里要注意的是类似性别，兴趣，城市这三类我们可以用value数值传入0，1，2来代表用户分别选的不同的选项。<br>兴趣部分，因为是多选，所以我们需要传入一个数组来方便我们展示，所有name属性写的是hobby[]来记录。</span><br><strong style="color: #ff620c;">formHandle.php的文件内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$inf = $_GET;</div><div class="line">?&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;table border=&quot;1&quot;&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td&gt;用户名&lt;/td&gt;</div><div class="line">			&lt;td&gt;密码&lt;/td&gt;</div><div class="line">			&lt;td&gt;性别&lt;/td&gt;</div><div class="line">			&lt;td&gt;兴趣&lt;/td&gt;</div><div class="line">			&lt;td&gt;城市&lt;/td&gt;</div><div class="line">			&lt;td&gt;简介&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td&gt;&lt;?php echo $inf[&quot;user&quot;] ?&gt;&lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;?php echo $inf[&quot;pass&quot;] ?&gt;&lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;?php </div><div class="line">					$sexArr = array(&quot;男&quot;,&quot;女&quot;);</div><div class="line">					echo $sexArr[$inf[&quot;sex&quot;]];</div><div class="line">				?&gt;</div><div class="line">			&lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;?php </div><div class="line">					$hobbyArr = array(&quot;写代码&quot;,&quot;修改代码&quot;,&quot;上传代码&quot;);</div><div class="line">					foreach ($inf[&quot;hobby&quot;] as $value) &#123;</div><div class="line">						echo $hobbyArr[$value].&quot; &quot;;</div><div class="line">					&#125;	</div><div class="line">				?&gt;</div><div class="line">			&lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;?php </div><div class="line">					$cityArr = array(&quot;上海&quot;,&quot;杭州&quot;);</div><div class="line">					echo $cityArr[$inf[&quot;city&quot;]];		</div><div class="line">				?&gt;</div><div class="line">			&lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;?php echo $inf[&quot;intro&quot;] ?&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>接下来我们来测试一下：<br><img src="http://olk97sdgv.bkt.clouddn.com/PHP-form1.png" alt="Image"><br>最终效果为：<br><img src="http://olk97sdgv.bkt.clouddn.com/PHP-form2.png" alt="Image"><br><i>这里博主提问一个问题，以上方法每次只能够保存一个用户的信息，如果想展示多行的用户信息该怎么办呢？</i></p>
<p></p><h1 id="展示多行的用户信息表">展示多行的用户信息表</h1><br>有经验的后台人士就会说了这时候就需要一个数据库来存入信息了，这里由于博主也是刚学PHP，就用txt文件来代替一下数据库了。<br>这里form.html中的<code>&lt;form action=&quot;test2.php&quot; method=&quot;get&quot;&gt;</code><br>然后建立一个text2.php文件，再建立一个存储用户信息的userinfo.txt和相对应做操作的userinfo.php两个文件，一共三个文件。<br><strong style="color: #ff620c;">text2.php的文件内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$str = json_encode($_GET);</div><div class="line">	$fh = fopen(&quot;userinfo.txt&quot;, &quot;a&quot;);</div><div class="line">	fwrite($fh, $str.&quot;\n&quot;);</div><div class="line">	fclose($fh);</div><div class="line"> ?&gt;</div></pre></td></tr></table></figure><p></p>
<p> 这里面由于用户提交到后台的信息为数组所以需要转换成json类型的字符串，用到了<strong style="color: #ff620c;">json_encode();</strong>的方法，再把用户提交的个人信息保存到userinfo.txt的文件中。<br> <strong style="color: #ff620c;">userinfo.php的文件内容：</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"> &lt;?php</div><div class="line">	// 用户信息的展示页 （把信息存文件里读取出来）</div><div class="line">	$fh = fopen(&quot;userinfo.txt&quot;, &quot;r&quot;);</div><div class="line">?&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">		&lt;title&gt;Document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;table border=&quot;1&quot;&gt;</div><div class="line">			&lt;tr&gt;</div><div class="line">				&lt;td&gt;用户名&lt;/td&gt;</div><div class="line">				&lt;td&gt;密码&lt;/td&gt;</div><div class="line">				&lt;td&gt;性别&lt;/td&gt;</div><div class="line">				&lt;td&gt;爱好&lt;/td&gt;</div><div class="line">				&lt;td&gt;城市&lt;/td&gt;</div><div class="line">				&lt;td&gt;简介&lt;/td&gt;</div><div class="line">			&lt;/tr&gt;</div><div class="line">			&lt;?php </div><div class="line">				while ($info = fgets($fh)) &#123;</div><div class="line">					$info = (array)json_decode($info);</div><div class="line">			?&gt;</div><div class="line">			&lt;tr&gt;</div><div class="line">				&lt;td&gt;&lt;?php echo $info[&quot;user&quot;]; ?&gt;&lt;/td&gt;</div><div class="line">				&lt;td&gt;&lt;?php echo $info[&quot;pass&quot;]; ?&gt;&lt;/td&gt;</div><div class="line">				&lt;td&gt;&lt;?php </div><div class="line">						$sexArr = array(&quot;男&quot;, &quot;女&quot;);</div><div class="line">						echo $sexArr[$info[&quot;sex&quot;]];</div><div class="line">					 ?&gt;&lt;/td&gt;</div><div class="line">				&lt;td&gt;&lt;?php</div><div class="line">						$loveArr = array(&quot;听音乐&quot;, &quot;看书&quot;, &quot;打球&quot;);</div><div class="line">						foreach ($info[&quot;love&quot;] as $value) &#123;</div><div class="line">							echo $loveArr[$value];</div><div class="line">						&#125;</div><div class="line">					?&gt;&lt;/td&gt;</div><div class="line">				&lt;td&gt;&lt;?php </div><div class="line">						$cityArr = array(&quot;北京&quot;, &quot;上海&quot;, &quot;广州&quot;);</div><div class="line">						echo $cityArr[$info[&quot;city&quot;]];</div><div class="line">					?&gt;&lt;/td&gt;</div><div class="line">				&lt;td&gt;&lt;?php echo $info[&quot;intro&quot;]; ?&gt;&lt;/td&gt;</div><div class="line">			&lt;/tr&gt;	</div><div class="line">			&lt;?php</div><div class="line">				&#125;</div><div class="line">			?&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p> 这下可以尝试在form.html页面多输入几个用户的信息<br> 展示效果为：<br> <img src="http://olk97sdgv.bkt.clouddn.com/PHP-form4.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h1 id=&quot;展示单行的用户信息表&quot;&gt;展示单行的用户信息表&lt;/h1&gt;&lt;br&gt;首先我们需要创建两个文件，一个为html文件，一个为php文件。&lt;br&gt;这里博主就创建了form.html和formHandle.php两个文件。
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础(三)</title>
    <link href="http://yoursite.com/2017/02/21/PHP%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
    <id>http://yoursite.com/2017/02/21/PHP基础(三)/</id>
    <published>2017-02-21T12:57:01.000Z</published>
    <updated>2017-02-24T12:34:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP文件的操作" style="text-align: center; background-color: #eee;">PHP文件的操作</h1>

<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><pre>$fh = <strong style="color: #ff620c;">fopen</strong>("test.txt", "a");</pre>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><h3 id="1-fread"><a href="#1-fread" class="headerlink" title="1.fread"></a>1.fread<a id="more"></a></h3><pre>$str = <strong style="color: #ff620c;">fread</strong>($fh, <strong style="color: #ff620c;">filesize</strong>("test.txt"));</pre>
filesize是获取文件的大小，返回的类型是字符串
<h3 id="2.fgets">2.fgets</h3>
fgets只返回一行，返回的类型也是字符串再次返回就从下一行开始
<pre>$str = <strong style="color: #ff620c;">fgets</strong>($fh);<br>$str = <strong style="color: #ff620c;">fgets</strong>($fh);</pre>

<h3 id="3-file"><a href="#3-file" class="headerlink" title="3.file"></a>3.file</h3><p>注意file返回的类型是数组</p>
<pre>$arr = <strong style="color: #ff620c;">file</strong>("test.txt");</pre>

<h3 id="4-file-get-contents"><a href="#4-file-get-contents" class="headerlink" title="4.file_get_contents"></a>4.file_get_contents</h3><p>用file_get_contents获取文件内容，也会返回出字符串，还可以用绝对路径打开一个网页</p>
<pre>$str = <strong style="color: #ff620c;">file_get_contents</strong>("test.txt");<br>$str = <strong style="color: #ff620c;">file_get_contents</strong>("https://www.baidu.com");</pre>

<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><h3 id="1-fwrite"><a href="#1-fwrite" class="headerlink" title="1.fwrite"></a>1.fwrite</h3><pre><strong style="color: #ff620c;">fwrite</strong>($fh, "我是写入的内容");</pre>

<h3 id="2-file-put-contents"><a href="#2-file-put-contents" class="headerlink" title="2.file_put_contents"></a>2.file_put_contents</h3><pre><strong style="color: #ff620c;">file_put_contents</strong>("test.txt", "我是put进去的");</pre>

<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><pre><strong style="color: #ff620c;">fclose</strong>($fh);</pre>

<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p><strong style="color: #ff620c;">copy</strong>(需要复制的文件, 新的文件名);<br><code>copy(&quot;test.txt&quot;, &quot;test2.txt&quot;);</code></p>
<h2 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h2><p><strong style="color: #ff620c;">rename</strong>(原文件名, 新文件名);<br><code>rename(&quot;test2.txt&quot;, &quot;rename.txt&quot;);</code></p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p><strong style="color: #ff620c;">unlink</strong>(需要删除的文件名);<br><code>unlink(&quot;test.txt&quot;);</code></p>
<h1 id="PHP获取PV" style="text-align: center; background-color: #eee;">PHP获取PV</h1><br>什么是PV？<br>PV（page view）即页面浏览量<br>这里博主介绍一下最简单的记录PV的原理以及方法<br>原理：通过判断是否存在记录pv量的文件，如果没有就创建，并在文件里写入1，如果有，就获取文件里的数值，并加1，再写入文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (file_exists(&quot;pv.txt&quot;))&#123;</div><div class="line">	$str = file_get_contents(&quot;pv.txt&quot;);</div><div class="line">	$str++;</div><div class="line">	echo &quot;当前的PV量是&quot;.$str;</div><div class="line">	file_put_contents(&quot;pv.txt&quot;, $str);</div><div class="line">&#125; else &#123;</div><div class="line">	echo &quot;当前的pv量是1&quot;;</div><div class="line">	file_put_contents(&quot;pv.txt&quot;, 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><h1 id="PHP对文件目录的操作" style="text-align: center; background-color: #eee;">PHP对文件目录的操作</h1>

<h2 id="打开目录"><a href="#打开目录" class="headerlink" title="打开目录"></a>打开目录</h2><pre>$dh = <strong style="color: #ff620c;">opendir</strong>(".");</pre>

<h2 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h2><p>如同fgets，第一次只读取第一个，第二次到第二个依次类推<pre>$str = <strong style="color: #ff620c;">readdir</strong>($dh);</pre>可以使用while循环来读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while ($file = readdir($dh)) &#123;</div><div class="line">	echo $file.&quot;&lt;hr/&gt;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将目录以数组的形式全部返回出来</p>
<pre>$fileArr = <strong style="color: #ff620c;">scandir</strong>(".");
    print_r($fileArr);</pre>

<h2 id="关闭目录"><a href="#关闭目录" class="headerlink" title="关闭目录"></a>关闭目录</h2><pre><strong style="color: #ff620c;">closedir</strong>($dh);</pre>

<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><pre><strong style="color: #ff620c;">mkdir</strong>("test");</pre>

<h2 id="删除文件-1"><a href="#删除文件-1" class="headerlink" title="删除文件"></a>删除文件</h2><p><pre><strong style="color: #ff620c;">rmdir</strong>(“test”);</pre></p>
<h1 id="以表格的形式展示出文件目录" style="text-align: center; background-color: #eee;">以表格的形式展示出文件目录</h1><br>这里博主就不多说了直接上例子！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$dh = opendir(&quot;.&quot;);</div><div class="line">?&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">		&lt;title&gt;Document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;table border=&quot;1&quot;&gt;</div><div class="line">			&lt;?php</div><div class="line">				while ($file = readdir($dh)) &#123;</div><div class="line">					echo &quot;&lt;tr&gt;&quot;;</div><div class="line">					echo &quot;&lt;td&gt;&#123;$file&#125;&lt;/td&gt;&quot;;</div><div class="line">					echo &quot;&lt;/tr&gt;&quot;;</div><div class="line">				&#125;</div><div class="line">			?&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><br><br>这种方式运行出的结果是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$dh = opendir(&quot;.&quot;);</div><div class="line">?&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">		&lt;title&gt;Document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;table border=&quot;1&quot;&gt;</div><div class="line">			&lt;?php</div><div class="line">				while ($file = readdir($dh)) &#123;</div><div class="line">			?&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;&lt;?php echo $file; ?&gt;&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">			&lt;?php</div><div class="line">				&#125;	</div><div class="line">			?&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><br><br>第三种显示目录的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	@$url = $_GET[&quot;url&quot;]; // @符号可以抑制报错，前提是这个错误不影响整个程序运行</div><div class="line">	echo $url;</div><div class="line">	if ($url) </div><div class="line">		$dh = opendir($url);</div><div class="line">	else </div><div class="line">		$dh = opendir(&quot;.&quot;);</div><div class="line">	</div><div class="line">?&gt;</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">		&lt;title&gt;Document&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;table border=&quot;1&quot;&gt;</div><div class="line">			&lt;?php</div><div class="line">				while ($file = readdir($dh)) &#123;</div><div class="line">			?&gt;</div><div class="line">					&lt;tr&gt;</div><div class="line">						&lt;td&gt;&lt;?php echo $file; ?&gt;&lt;/td&gt;</div><div class="line">					&lt;/tr&gt;</div><div class="line">			&lt;?php</div><div class="line">				&#125;	</div><div class="line">			?&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">		&lt;a href=&quot;showDir3.php?url=..&quot;&gt;链接到上一层&lt;/a&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><br><br><h1 id="PHP文件目录的一些操作" style="text-align: center; background-color: #eee;">PHP文件目录的一些操作</h1>

<h2 id="获取上一次的访问时间"><a href="#获取上一次的访问时间" class="headerlink" title="获取上一次的访问时间"></a>获取上一次的访问时间</h2><p><strong style="color: #ff620c;">fileatime();</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">date_default_timezone_set(&apos;PRC&apos;); // 设置默认时区</div><div class="line">$time = fileatime(&quot;file.php&quot;); // 时间戳单位是秒</div><div class="line">$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式</div><div class="line">echo $time;</div></pre></td></tr></table></figure></p>
<h2 id="获取上一次的修改时间"><a href="#获取上一次的修改时间" class="headerlink" title="获取上一次的修改时间"></a>获取上一次的修改时间</h2><p><strong style="color: #ff620c;">filemtime();</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$time = filemtime(&quot;file.php&quot;); // 时间戳单位是秒</div><div class="line">$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式</div><div class="line">echo $time;</div></pre></td></tr></table></figure></p>
<h2 id="获取上一次Innode的修改时间"><a href="#获取上一次Innode的修改时间" class="headerlink" title="获取上一次Innode的修改时间"></a>获取上一次Innode的修改时间</h2><p><strong style="color: #ff620c;">filectime();</strong><br>ps:Innode包括修改权限等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$time = filectime(&quot;file.php&quot;); // 时间戳单位是秒</div><div class="line">$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式</div><div class="line">echo $time;</div></pre></td></tr></table></figure></p>
<h2 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h2><p><strong style="color: #ff620c;">basename();</strong><br>注意它获取的是一个文件的文件名+后缀扩展名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$path = $_SERVER[&apos;REQUEST_URI&apos;]; // 获取服务器中的文件路径</div><div class="line">$path = __FILE__;  // 获取服务器根路径文件路径</div><div class="line">$basename = basename($path); // 获取文件名</div><div class="line">print_r(pathinfo($path)); // 返回的是数组</div></pre></td></tr></table></figure></p>
<p></p><h1 id="PHP文件的权限修改" style="text-align: center; background-color: #eee;">PHP文件的权限修改</h1><br><strong style="color: #ff620c;">chomd();</strong><br>用法：chomd(文件，八进制组成的权限)<br>权限由4位八进制组成，第一个是0，表示这是一个八进制，<br>第二位代表是所有者的权限，第三位是所有者所在组的权限，第四位是任何人的权限，<br>权限有1，2，4组成，可累加进行权限的叠加，<br>1代表可执行权限、2代表可写权限、4代表可读权限<br>例如要设置所有者可读可写，所有者所在组可执行可写，任何人可执行可读<br><code>chmod(&quot;file.php&quot;, 0635);</code><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP文件的操作&quot; style=&quot;text-align: center; background-color: #eee;&quot;&gt;PHP文件的操作&lt;/h1&gt;

&lt;h2 id=&quot;打开文件&quot;&gt;&lt;a href=&quot;#打开文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件&quot;&gt;&lt;/a&gt;打开文件&lt;/h2&gt;&lt;pre&gt;$fh = &lt;strong style=&quot;color: #ff620c;&quot;&gt;fopen&lt;/strong&gt;(&quot;test.txt&quot;, &quot;a&quot;);&lt;/pre&gt;

&lt;h2 id=&quot;读取文件&quot;&gt;&lt;a href=&quot;#读取文件&quot; class=&quot;headerlink&quot; title=&quot;读取文件&quot;&gt;&lt;/a&gt;读取文件&lt;/h2&gt;&lt;h3 id=&quot;1-fread&quot;&gt;&lt;a href=&quot;#1-fread&quot; class=&quot;headerlink&quot; title=&quot;1.fread&quot;&gt;&lt;/a&gt;1.fread
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础(二)</title>
    <link href="http://yoursite.com/2017/02/21/PHP%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2017/02/21/PHP基础(二)/</id>
    <published>2017-02-21T02:51:42.000Z</published>
    <updated>2017-02-21T12:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 id="PHP的字符串" style="text-align: center;background-color: #eee;">PHP的字符串</h1><p style="margin: 10px 0 -10px 0;">首先来区别一下下面两种字符串:<pre>echo “hello”.”world”;<br>echo “hello”,”world”;</pre><a id="more"></a><span style="color: red;">注意:这里第一条是一个字符串，第二条是两个字符串</span></p><p></p>
<p></p><h2 id="字符串的查找">字符串的查找</h2><p>这里用<strong style="color: #ff620c;">strpos();</strong>命令<br>用法：strpos(要操作的字符串，要查找的字符)返回查找字符的位置<pre>$str = “hello world”;<br>echo strpos($str, “w”); // 返回的是第一次查找的位置 输出6<br>echo stripos($str, “W”);  // stripos是不区分大小写的查找 也是输出6</pre></p><h2 id="字符串的替换">字符串的替换</h2><p>这里用<strong style="color: #ff620c;">str_replace();</strong>命令替换字符串的匹配内容<br>用法：str_replace(匹配内容,替换内容,字符串)<pre>$str = str_replace(“l”, “<em>“, $str); // 能将全部查找的到的都进行替换<br>echo $str; // 输出he**o wor</em>d<br>$str = str_ireplace(“L”, “<em>“, $str); // 同样不区分大小写<br>echo $str; // 输出he**o wor</em>d</pre></p><h2 id="字符串的截取">字符串的截取</h2><p>这里有<strong style="color: #ff620c;">substr();</strong>命令截取<br>用法：substr(字符串,截取的起始长度(可以为负数),截取的长度)<pre>$str = “hello world”;<br>$str = substr($str, 3); // $str为lo world<br>$str = substr($str, 3, 7); // $str为lo worl<br>$str = substr($str, -4, 3); // $str为orl<br></pre></p><h2 id="字符串的截取2">字符串的截取2</h2><p>PHP也有第二种截取命令<strong style="color: #ff620c;">strstr();</strong><br>strstr(字符串,截取的字符)<pre>$str = “hello world”;<br>$str = strstr($str, “ll”);<br>$str = stristr($str, “LL”); // 不区分大小写</pre></p><h2 id="字符串的去除空格">字符串的去除空格</h2><p>这里有<strong style="color: #ff620c;">ltrim();rtrim();trim();</strong>三种方法。<br>分别是去除左边空格，去除右边空格，和去除两边空格<pre>$str = “       hello      “;<br>$str = ltrim($str); // 去除左边的空格<br>$str = rtrim($str); // 去除有边的空格<br>$str = trim($str); // 去除所有空格</pre></p><h2 id="获取字符串长度">获取字符串长度</h2><p>用<strong style="color: #ff620c;">strlen();</strong>来获取<br><pre>$str = “wwwwwwwww”;<br>echo strlen($str); // 这里输出为8</pre></p><h2 id="字符串的大小写转换">字符串的大小写转换及反转</h2><p>1.转换成小写<br><pre>$str = “ABCD”;<br>echo <strong style="color: #ff620c;">strtolower($str)</strong>; // 输出结果为abcd</pre>2.转换成大写<br><pre>$str = “abcd”;<br>echo <strong style="color: #ff620c;">strtoupper($str);</strong> // 输出结果为ABCD</pre>3.反转<br><pre>$str = “abcd”;<br>echo <strong style="color: #ff620c;">strrev($str);</strong> // 输出结果为ABCD</pre></p><h2 id="去除字符串中的标签">去除字符串中的标签</h2><p><strong style="color: #ff620c;">strip_tags();</strong></p><h2 id="字符串的换行符">字符串的换行符</h2><p><strong style="color: #ff620c;">nl2br();</strong><pre>$str = “AB\nCD”;<br>echo nl2br($str); // 输出结果为AB<br>                            //CD</pre></p><h1 id="PHP的数组" style="text-align: center;background-color: #eee;">PHP的数组</h1><h2 id="数组的创建">数组的创建</h2><p>PHP的数据创建有三种方式：<br>1.<strong style="color: #ff620c;">array();</strong>创建<pre>$fruit = array(“apple”, “orange”, “banana”);<br>$fruit[] = “pear”; // 在数组最后添加</pre><pre>$language = array(“en” =&gt; “English”, “ch” =&gt; “Chinese”);//“en”为键，”English”为值<br>$language[“fr”] = “French”; // 在数组最后添加</pre>2.<strong style="color: #ff620c;">直接赋值</strong><pre>$fruit[] = “orange”;<br>$fruit[] = “banana”;</pre>3.<strong style="color: #ff620c;">rang();</strong>创建<pre>$num = range(0, 5); // 从0至5按顺序填充到数组中</pre></p><h2 id="获取数组的长度">获取数组的长度</h2><p>使用<strong style="color: #ff620c;">count();</strong>获取<pre>$num = range(0, 5);<br>echo “该数组长度”.count($letter); // 输出结果为6</pre>这里说一下我们一般输出数组用的是<strong style="color: #ff620c;">print_r();</strong>这个方法</p><h2 id="判断是否为数组">判断是否为数组</h2><p>可以使用<strong style="color: #ff620c;">is_array();</strong><pre>$a = array(“a”);<br>echo is_array($letter);</pre></p><h2 id="判断数组是否存在某个值">判断数组是否存在某个值</h2><p>用<strong style="color: #ff620c;">in_array();</strong><pre>$letter = range(“a”, “A”);<br>if (in_array(“B”, $letter))<br>    echo “数组中有b”;<br>else<br>    echo “数组中没有b”;</pre></p><h2 id="遍历数组">遍历数组</h2><p>这里博主推荐使用<strong style="color: #ff620c;">foreach</strong>来遍历较为方便<br>用法：foreach ($数组 as $数组的键 =&gt; $数组的值) {…..}<pre>foreach ($letter as $key =&gt; $value) {<br>    echo $key.”的值是”.$value;<br>}</pre><pre>foreach ($letter as $value) {<br>    echo “值为”.$value;<br>}</pre></p><h2 id="数组的排序方式">数组的排序方式</h2><h3 id="sort">1.sort rsort</h3><p>sort, rsort是给索引数组的排序<pre>$fruit = array(“orange”, “banana”, “apple”);<br>sort($fruit); // 升序<br>rsort($fruit); // 降序<br></pre></p><h3 id="ksort">2.ksort krsort</h3><p>ksort, krsort是依据关联数组的键排序<pre>$fruit = array(“b” =&gt; “orange”, “a” =&gt; “banana”, “c” =&gt; “apple”);<br>ksort($fruit); // 升序<br>krsort($fruit); // 降序</pre></p><h3 id="asort">3.asort arsort</h3><p>asort, arsort是根据关联数组的值排序<pre>$fruit = array(“b” =&gt; “orange”, “a” =&gt; “banana”, “c” =&gt; “apple”);<br>asort($fruit); // 升序<br>arsort($fruit); // 降序</pre></p><h2 id="二维数组">二维数组</h2><pre>$people = array(<br>    array(“name” =&gt; “zhangsan” , “sex” =&gt; “man”),<br>    array(“name” =&gt; “lisi” , “sex” =&gt; “female”),<br>    array(“name” =&gt; “wangwu” , “sex” =&gt; “man”)<br>);</pre><h2 id="二维数组的遍历方法">二维数组的遍历方法</h2><p><pre>foreach ($people as $key =&gt; $newArr) {<br>    var_dump($newArr);<br>    foreach ($newArr as $key =&gt; $value) {<br>        echo $key.”的值是”.$value;<br>    }<br>}</pre></p><h1 id="PHP数组和字符串之间的转换" style="text-align: center;background-color: #eee;">PHP数组和字符串之间的转换</h1><h2>数组转换字符串</h2><p>用<strong style="color: #ff620c;">implode();</strong>转换<br>用法：implode(分隔符，要操作的数组)<pre>$arr = array(1, 2, 3, 4 ,5);<br>$str = implode(“”, $arr);<br>echo $str; // 输出为12345</pre></p><h2 id="字符串转换数组">字符串转换数组</h2><p>用<strong style="color: #ff620c;">explode();</strong>转换<br>用法：explode(分隔符，要操作的字符串)<pre>$str = “a,b,c,d,e”;<br>$arr = explode(“,”, $str);<br>print_r($arr); // 输出Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d [4] =&gt; e )</pre></p><h1 id="PHP对文件的操作" style="text-align: center;background-color: #eee;">PHP对文件的操作</h1><h2 id="打开文件">打开文件</h2><pre>$fh = fopen(“test.txt”, “a”);</pre><span>a表示操作权限，会在后面讲到，要想对文件进行操作就必须要先打开文件</span><h2 id="读取文件">读取文件</h2><h3 id="filesize">1.filesize</h3><p>获取文件大小<strong style="color: #ff620c;">filesize</strong>，返回字符串<pre>$str = fread($fh, filesize(“test.txt”)); // 可以读取文件的内容</pre></p><h3 id="fgets">2.fgets</h3><p><strong style="color: #ff620c;">fgets</strong>，返回字符串，只返回一行，再次运行返回就从下一行开始<pre>while ($str = fgets($fh)) {<br>    echo $str.”<code>&lt;hr/&gt;</code>“;<br>}</pre></p><h3 id="file">3.file</h3><p><strong style="color: #ff620c;">file</strong>，返回数组</p><pre>$arr = file(“test.txt”);</pre><h3 id="file_get_contents">4.file_get_contents</h3><p><strong style="color: #ff620c;">file_get_contents</strong>获取文件内容，并把内容当成字符串返回出来，也可以用绝对路径打开一个网页<pre>$str = file_get_contents(“test.txt”);<br>$str = file_get_contents(“<a href="https://www.baidu.com" target="_blank" rel="external">https://www.baidu.com</a>“);</pre></p><h2 id="文件写入">文件写入</h2><pre><strong style="color: #ff620c;">fwrite</strong>($fh, “我是写入的内容”);</pre><h2 id="关闭文件">关闭文件</h2><pre><strong style="color: #ff620c;">fclose</strong>($fh);</pre><h2 id="新建文件">新建文件</h2><pre>$fh = fopen(“test2.txt”, “a”);<br>fwrite($fh, “我是新建的”);<br>fclose($fh);</pre><h2 id="新建文件2">新建文件2</h2><pre><strong style="color: #ff620c;">file_put_contents</strong>(“test2.txt”, “我是put进去的”);</pre><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h1 id=&quot;PHP的字符串&quot; style=&quot;text-align: center;background-color: #eee;&quot;&gt;PHP的字符串&lt;/h1&gt;&lt;p style=&quot;margin: 10px 0 -10px 0;&quot;&gt;首先来区别一下下面两种字符串:&lt;pre&gt;echo “hello”.”world”;&lt;br/&gt;echo “hello”,”world”;&lt;/pre&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础(一)</title>
    <link href="http://yoursite.com/2017/02/20/PHP%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>http://yoursite.com/2017/02/20/PHP基础(一)/</id>
    <published>2017-02-20T13:00:01.000Z</published>
    <updated>2017-02-21T11:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 id="初识PHP" style="text-align: center;background-color: #eee; margin-bottom: 10px;">初识PHP</h1><p style="text-indent: 2em;">PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</p><a id="more"></a><p style="text-indent: 2em; margin-top: -10px;">我们有时可以看到以.php作为后缀名的文件，这就是PHP文件，它可以包含文本、HTML、JavaScript代码和PHP代码，且PHP代码在服务器上执行，结果以纯HTML形式返回给浏览器。</p><h2 id="PHP标记">PHP标记</h2><code>&lt;?php /*所有的php代码就写在这*/ ?&gt;</code><p></p>
<p></p><h2 id="PHP的基本语法">PHP的基本语法</h2><p>1.单行注释包括&nbsp;&nbsp;’//‘,&nbsp;&nbsp;’#’,&nbsp;&nbsp;多行注释’/<em>…</em>/‘<br>2.php必须在指令末尾加上分号<br>3.对大小写敏感</p><h1 id="PHP的变量" style="text-align: center;background-color: #eee;">PHP的变量</h1><h2 id="变量的规则">变量的规则</h2><p>PHP的变量名由字母、数字、下划线组成<br>变量名也是区分大小写的</p><h2 id="变量的声明">变量的声明</h2>PHP的变量声明符号是$<br>例如:<code>$a = 10;$b = “hello world”;</code><h2 id="变量的传值">变量的传值</h2><pre>$a = 10;<br>$b = $a;<br>echo $a, $b; // $a = 10, $b = 10<br>$b = 20;<br>echo $a, $b; // $a = 10, $b = 20</pre><h2 id="变量的传址">变量的传址</h2><pre>$a = 10;<br>$b = <i style="color: red; font-style: normal;">&amp;</i>$a;<br>echo $a, $b; // $a = 10, $b = 10<br>$b = 20;<br>echo $a, $b; // $a = 20, $b = 20</pre><h2 id="变量的变量">变量的变量</h2><pre>$a = “hello”;<br>$$a = “world”;<br>echo $hello; // 输出world<br>$a = “hello”;<br>$hello = “world”;<br>echo $$a; // 输出也是world</pre><h2 id="PHP的超全局变量">PHP的超全局变量</h2><p>PHP的超全局变量有很多，这里举例说几个:<br>$_SERVER:包含了服务器与执行环境的一些信息<br>var_dump:输出任何类型的数据，以及数据类型和数据长度<br>$_GET:获得通过get方式传送的数据<br>$_POST:获得post方式传输的数据<br>$_REQUEST:既能获得get方式，又能获得post方式<br>$GLOBALS:引用全局作用域中可用的全部变量这里介绍下，$GLOBALS的简单用法<pre>$a = 10;<br>$b = 15;<br>echo $GLOBALS[“a”] + $GLOBALS[“b”]; // 输出为25</pre><span style="color: skyblue;">想了解更多的有关PHP超全局变量的可以查询<a style="color: skyblue; font-style: italic;" href="http://php.net/manual/zh/language.variables.superglobals.php" target="_blank" rel="external">PHP的超全局变量</a></span></p><h1 id="PHP的常量" style="text-align: center;background-color: #eee;">PHP的常量</h1><h2 id="常量的介绍">常量的介绍</h2><p>常量是一个一经定义就无法改变的量。<br>常量的定义方法是用define();<br>常量对大小写敏感<br>常量输出时不加$<br>常量的值只能是数值(整形，浮点型)，字符串，以及布尔。</p><pre>// 常量的定义方法:define(常量名, 常量值)<br>define(“PI”, 3.1415926);<br>echo PI; // 输出3.1415926</pre><h2 id="内置常量">内置常量</h2><p>PHP的内置常量也有很多，这里举例说明几个：<br>PHP_OS:获得当前运行的操作系统<br>PHP_VERSION:显示PHP的版本<br><span style="color: skyblue;">想了解更多的有关PHP内置常量的可以查询<a style="color: skyblue; font-style: italic;" href="http://php.net/manual/zh/reserved.constants.php" target="_blank" rel="external">PHP的内置常量</a></span></p><h2 id="魔术常量">魔术常量</h2><p>PHP的魔术常量有很多，这里举例说明几个：<br><code>__LINE__</code>:显示当前的行数魔术常量会根据位置不同返回不同的值<br><code>__FILE__</code>:显示文件名<br><code>__DIR__</code>:显示目录<br><span style="color: skyblue;">想了解更多的有关PHP魔术常量的可以查询<a style="color: skyblue; font-style: italic;" href="http://php.net/manual-lookup.php?pattern=%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F&scope=quickref" target="_blank" rel="external">PHP的魔术常量</a></span></p><h1 id="PHP的变量类型" style="text-align: center;background-color: #eee;">PHP的变量类型</h1><h2>PHP变量的类型</h2><p>四种标量数据类型：字符串、布尔、整型、浮点型。<br>两种复杂数据类型：数组和对象。<br>两种特殊数据类型：资源和null。</p><h3 id="整型">1.整型</h3><pre>$num = 10;<br>$num = -10;<br>$num = 075; // 八进制的<br>$num = 0xA1; // 十六进制的<br>$num = 7e10; // 科学计数法</pre><h3 id="浮点型">2.浮点型(小数)</h3><pre>$num = 3.3e-2; // 输出0.0331<br></pre><h3 id="布尔型">3.布尔型</h3><pre>echo true; // 1<br>echo false; // 什么也不输出</pre><h3 id="字符串">4.字符串</h3><p>定义字符串有三种包括单引号，双引号，定界符<br><strong style="color: red;">注意：单引号不能解析变量以及字符，而双引号可以</strong></p><pre>$a = “zhangsan”;<br>$str = “hel\nlo $a {$a}bc”;<br>echo $str; // 输出结果为hel lo zhangsan zhangsanbc</pre><h3 id="数组">5.数组</h3><pre>$arr = array(1, 3, 4, 5);<br>var_dump($arr); // <span style="color: red;">注意数组输出用var_dump</span></pre><h3 id="对象">6.对象</h3><p>对象类型的可以通过类的实例化或者强制转换创建</p><h3 id="资源">7.资源</h3><p>资源类型的可以通过读取文件之类的操作获得的如:</p><pre>$fh = open(“text.txt”,”w”);</pre><h3 id="NULL">8.Null</h3><p>直接赋值为null; 未定义的为空的</p><h3 id="类型转换(隐式类型转换)">类型转换(隐式类型转换)</h3><pre>$num = 10;<br>$str = “10dsvgnsdnhfv”;<br>echo $num + $str; // “+”只能进行数值运算 输出结果为20</pre><p>1.如果想获取这个变量的类型可以使用gettype($变量名)例如:<pre>$num = 10;<br>echo gettype($num); // 输出类型是integer</pre><br>2.如果想判断这个变量是否是字符串可以使用is_string($变量名)例如:    <pre>$str = “hello”;<br>echo gettype($str); // 输出类型是1</pre></p><h3 id="定界符之heredoc">定界符之heredoc</h3><p><span style="color: red;">标识符顶格写，标识符独占一行</span>示例:<pre>    $name = “张三”;<br>    $str = &lt;&lt;&lt;<code>EOF</code><br>    你好，{$name}!<br>EOF;   // <span style="color: red;">注意这里”EOF”要顶格写！</span><br>    echo $str; // 输出结果为你好，张三！</pre></p><h1 id="PHP的运算符" style="text-align: center;background-color: #eee;">PHP的运算符</h1><span>基本的语法还是与JavaScript大致相同，不过每个变量之前都需要加上”$”的符号。<br>这里就说明几个特殊的:</span><h2 id="PHP字符串的拼接">PHP字符串的拼接</h2><p>字符串之间进行拼接用”.”例如:<pre>$a = “hello”;<br>$b = “你好”;<br>$sum = $a.$b;<br>echo $sum; // 输出hello你好</pre><pre>$a = “hello”;<br>$a.=”world”;<br>echo $a; // $a = $a.”world”; 输出结果为helloworld</pre></p><h2 id="自增">自增</h2><pre>$i = 0;<br>$i++; // 变量使用时，要带上$符</pre><h1 id="PHP的函数" style="text-align: center;background-color: #eee;">PHP的函数</h1><h2 id="自定义函数">自定义函数</h2><pre>function show(){<br>    echo “自定义函数”;<br>}<br>show();</pre><h2 id="传参函数">传参函数</h2><span>实例一:</span><pre>function add(<span style="color: red;">$a, $b</span>){<br>    echo $a + $b;<br>}</pre><span>实例二:</span><pre>function defaults($h, <span style="color: red;">$hobby = “打代码”</span>){<br>    echo “我的兴趣是{$play}，一写就是{$h}小时”;<br>}<br>defaults(10, “写代码”);<br>// 注意这里要传参传默认值的参数需要写在最后一位</pre><h2 id="递归函数">递归函数</h2><pre>$a = 10;<br>$b = 15; // <span style="color: red;">注意在PHP中$a和$b这里是全局变量，在函数内部访问不到</span><br>function digui(){ // <span style="color: red;">要调用全局变量$a和$b这里推荐两个方法</span><br>    echo s[“a”]+$GLOBALS[“b”]; <br>    global $a, $b;<br>    echo $a + $b;<br>}<br>digui();</pre><h2 id="函数内部的静态变量">函数内部的静态变量</h2><pre>function fn(){<br>    static $i = 0; // <span style="color: red;">静态变量 和闭包类似的功能，垃圾不销毁机制</span><br>    echo $i;<br>$i++;<br>}<br>fn(); // 输出0<br>fn(); // 输出1<br>fn(); // 输出2</pre><h1 id="PHP的表单" style="text-align: center;background-color: #eee;">PHP的表单</h1><p>这里就用实例说明:<br>在一个html文件中写入<pre><code>&lt;body&gt;</code><br>    <code>&lt;a href=&quot;test.php?pid=10&quot;&gt;链接到某某页&lt;/a&gt;</code><br>    <code>&lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt;</code><br>        用户名：<code>&lt;input type=&quot;text&quot; name=&quot;user&quot; value=&quot;&quot; /&gt;</code><br>        密码：<code>&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;&quot; /&gt;</code><br>        <code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</code><br>    <code>&lt;/form&gt;</code><br><code>&lt;/body&gt;</code></pre>在test.php文件中写入<pre>&lt;?php<br>    var_dump($_GET);<br>    $pid = $_GET[“pid”];<br>    echo $pid;<br>?&gt;</pre>这样就可以获取到在html页面中的input框内填入的数据</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h1 id=&quot;初识PHP&quot; style=&quot;text-align: center;background-color: #eee; margin-bottom: 10px;&quot;&gt;初识PHP&lt;/h1&gt;&lt;p style=&quot;text-indent: 2em;&quot;&gt;PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的一些基本知识</title>
    <link href="http://yoursite.com/2017/02/20/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/02/20/JavaScript的一些基本知识/</id>
    <published>2017-02-20T05:33:31.000Z</published>
    <updated>2017-02-28T08:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h1 id="JavaScript中的变量" style="text-align: center; background-color: #eee;">JavaScript中的变量</h1><p></p>
<p></p><h2 id="变量的规则">一、变量的规则</h2><p></p>
<p></p><p style="margin-bottom: 0;">1.首字母必须是英文字母或者下划线<br>2.由英文字母、数字、下划线和$组成<br>3.不能与JavaScript关键词和保留字重名<br>4.最好以驼峰命名法，第一个单词首字母小写，其它单词首字母大写<br></p><a id="more"></a><h2 id="变量的声明方法">二、变量的声明方法</h2><p>var 变量名<br>例如：<code>var a = 10;</code>&nbsp;&nbsp;(变量名a是不分类型的，但是a里面存储的值是分类型的)<br>如果想获取变量a的值的类型可以是用”typeof”。如：console.log(typeof a) 打印一下a的值的种类<br></p><h2 id="变量的转换方式">三、变量的转换方式</h2><h3 id="显示转换">1.显示转换</h3><p>1.String(); 可以把括号内的值转化为字符串类型<br>2.Number(); 可以把括号内的值转化为数值类型，如果是字符串，字符串的内容必须是整数或者小数，不能有其他字符<br>3.parseInt(); 转数值类型，可以理解为是取整操作，可以有其他字符，转化的时候其它字符以后的内容不转化。</p><h3 id="隐示转换">2.隐示转换</h3><p>隐士转换是什么意思呢?<br>就是计算机自己帮我们做的类型转换。<br>比如： 1 + “2”  会出现什么结果呢?<br><span style="color: red">计算机会认为+是一个取正操作符，运算符重载。把1转化成”1”然后和2进行拼接。</span><br>所以结果是12</p><h2 id="变量的作用域">四、变量的作用域</h2><strong style="color: red; font-weight: normal;">不管全局变量还是局部变量，尽量都不要重名。</strong><h3 id="全局变量">1.全局变量</h3><p></p>
<p></p><p>在函数外部声明的可以称之为是全局变量，在任何地方都可以使用。</p><h3 id="局部变量">2.局部变量</h3><p></p>
<p></p><p>局部变量值，在函数内声明的变量，只能在函数内部使用。<br></p><img src="http://olk97sdgv.bkt.clouddn.com/JavaScript-Basics/JS-variable.jpg"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中变量的知识</span><p></p>
<p></p><h2 id="变量的数据类型">五、变量的数据类型</h2><h3 id="基本数据类型">1.基本数据类型</h3><p>number<br>string<br>bool<br>undefined<br>null</p><h3 id="复杂数据类型">2.复杂数据类型</h3><p>object</p><p></p>
<p></p><h1 id="变量的运算符" style="text-align: center;background-color: #eee;">JavaScript中的运算符</h1><p></p>
<p></p><h2 id="大小关系">一、大小关系</h2><p>基本的&nbsp;&nbsp;”&gt;,&lt;,=,&gt;=,&lt;=”&nbsp;&nbsp;博主就不在此多说了，相信各位对代码感兴趣的同学都懂~<br>在js中”==”则是比较两个运算数的返回值是否相等，”!=”则是返回值不相等<br>而”===”则是比较两个运算数的返回值和数据的类型是否都相等。<br>“!==”则是返回值和数据的类型都不相等。<br></p><h2 id="算数运算符">二、算数运算符</h2><p>同样正常的&nbsp;&nbsp;”+ - * / %”&nbsp;&nbsp;也不用多说了。<br>这里要提两点：</p>
<p>1.”+”号不仅有求和的运算，还能够进行字符串拼接，如之前说的可以帮我们进行隐示转换。<br>2.”-“号也不仅只有减法运算，还能够对操作的数值进行取反作用。</p><p></p>
<p></p><h2 id="自增和自减">三、自增和自减</h2><p><code>i++/i--</code><br>加或减在变量之前，就先计算出变量的值，再进行其他操作。<br>加或减在变量之后，就先进行下面操作，再对变量进行求值。<br></p><p></p>
<p></p><h2 id="逻辑运算符">四、逻辑运算符</h2><h3 id="逻辑与">1.逻辑与(&amp;&amp;)</h3><p>当条件有2个的时候会用到逻辑运算符，如果两个条件都为true则返回true。</p><h3 id="短路与">1.短路与</h3><p>逻辑与需要多个条件都为真的时候整个表达式才是真，所以当前面的条件为假的时候，就不会去执行后面的判断条件。</p><h3 id="逻辑或">3.逻辑或(||)</h3><p>用逻辑或连接的两个bool值，只要有一个为真，整个表达式就为真，两个bool都为假的时候，整个表达式为假。</p><h3 id="短路或">4.短路或</h3><p>需要多个条件有一个为真的时候整个表达式就是真，所以当前面的条件为真的时候，就不会去执行后面的判断条件。</p><h3 id="逻辑非">5.逻辑非(!)</h3><p>如果条件返回值是true则返回false，如果是false则返回true。</p><p></p>
<p></p><h2 id="三元表达式">五、三元表达式</h2><p>格式为：条件 ? 结果1 : 结果2<br>例如：<code>5 &gt; 4 ? true : false</code><br>因为5大于4这个结果是真的所以显示为true。</p><img src="http://olk97sdgv.bkt.clouddn.com/JavaScript-Basics/JS-ysf.jpg"><br><span style="display: block; margin-top: -25px; text-align: center; font-size: 12px;">博主自己整理的一些JavaScript中变量运算符的知识</span><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h1 id=&quot;JavaScript中的变量&quot; style=&quot;text-align: center; background-color: #eee;&quot;&gt;JavaScript中的变量&lt;/h1&gt;&lt;/p&gt;
&lt;p&gt;&lt;h2 id=&quot;变量的规则&quot;&gt;一、变量的规则&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;margin-bottom: 0;&quot;&gt;1.首字母必须是英文字母或者下划线&lt;br&gt;2.由英文字母、数字、下划线和$组成&lt;br&gt;3.不能与JavaScript关键词和保留字重名&lt;br&gt;4.最好以驼峰命名法，第一个单词首字母小写，其它单词首字母大写&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>个人收集的前端相关的网站</title>
    <link href="http://yoursite.com/2017/02/18/%E4%B8%AA%E4%BA%BA%E6%94%B6%E9%9B%86%E7%9A%84%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/02/18/个人收集的前端相关的网站/</id>
    <published>2017-02-18T06:50:03.000Z</published>
    <updated>2017-02-20T02:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3 id="学习类" style="background-color: #eee;padding-top: 0;text-align: center;">学习类</h3><a href="http://www.w3school.com.cn/" target="_blank" rel="external">w3school</a><br><a href="http://www.w3cmark.com/" target="_blank" rel="external">w3cmark<em>前端笔记</em></a><br><a href="http://www.cricode.com/" target="_blank" rel="external">快课网</a><br><a href="http://lib.csdn.net/bases?page=2&type=all#md" target="_blank" rel="external">知识库 - CSDN</a><br><a href="http://am-team.github.io/amg/dev-exp-doc.html" target="_blank" rel="external">无线Web开发经验谈</a><br><a href="http://www.gbtags.com/gb/index.htm" target="_blank" rel="external">极客标签</a><br><a href="http://weekly.manong.io/issues/" target="_blank" rel="external">往期回顾码农周刊</a><br><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a><a id="more"></a><br><a href="http://div.io/#/welcome" target="_blank" rel="external">Div.IO</a><br><a href="http://www.w3cplus.com/" target="_blank" rel="external">w3cplus_引领web前沿，打造前端精品教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">JavaScript | MDN</a><br><a href="http://ghmagical.com/article/page/id/uwzkWO5UXjug" target="_blank" rel="external">canvas动画包教不包会</a><br><a href="http://study.163.com/courses" target="_blank" rel="external">网易云课堂</a><br><a href="http://www.lvyestudy.com/" target="_blank" rel="external">绿叶学习网</a><br><a href="http://zkiie.com/2017/02/11/%E5%89%8D%E7%AB%AF%E6%94%B6%E8%B4%B9%E8%A7%86%E9%A2%91%E8%AF%BE%E7%A8%8B%E5%88%86%E4%BA%AB/" target="_blank" rel="external">前端收费视频课程分享 | ByZhkc3</a><br><a href="http://php.net/manual/zh/" target="_blank" rel="external">PHP: PHP 手册 - Manual</a><br><a href="http://cn.vuejs.org/v2/guide/" target="_blank" rel="external">介绍 - vue.js</a><br><a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/?t=20161221#产品定位及功能介绍" target="_blank" rel="external">微信小程序接入指南</a><br><a href="http://play.csssecrets.io/" target="_blank" rel="external">csssecrets</a><p></p>
<p></p><h3 id="jQuery类" style="background-color: #eee;padding-top: 0;text-align: center;">jQuery类</h3><a href="http://www.htmleaf.com/" target="_blank" rel="external">jQuery之家</a><br><a href="http://www.jq22.com/" target="_blank" rel="external">jQuery插件库</a><br><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="external">jQuery API 3.1 中文文档</a><p></p>
<p></p><h3 id="社区论坛博客类" style="background-color: #eee;padding-top: 0;text-align: center;">社区论坛博客类</h3><a href="http://www.lymoo.online/" target="_blank" rel="external">Lymoo’s blog</a><br><a href="http://www.wxapp-union.com/" target="_blank" rel="external">微信小程序联盟</a><br><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN.NET</a><br><a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a><br><a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a><br><a href="https://gold.xitu.io/welcome/frontend/?utm_source=zhangxinxu&utm_medium=banner&utm_content=gaoshou&utm_campaign=q3_personal" target="_blank" rel="external">掘金</a><br><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰</a><br><a href="http://www.zhangxinxu.com/wordpress/2016/04/" target="_blank" rel="external">张鑫旭</a><br><a href="https://www.h5jun.com/post/?page=2" target="_blank" rel="external">十年踪迹</a><br><a href="http://www.cnblogs.com/wangfupeng1988/p/4649709.html" target="_blank" rel="external">王福朋</a><br><a href="http://blog.bingo929.com/" target="_blank" rel="external">彬Go</a><br><a href="http://f2er.club/" target="_blank" rel="external">前端人的俱乐部</a><br><a href="http://www.css88.com/" target="_blank" rel="external">WEB前端开发</a><br><a href="http://jiongks.name/" target="_blank" rel="external">囧克斯</a><br><a href="http://caibaojian.com/" target="_blank" rel="external">前端开发博客</a><br><a href="https://my.oschina.net/mumu/" target="_blank" rel="external">大漠穷秋</a><br><a href="http://taobaofed.org/" target="_blank" rel="external">Taobao FED</a><br><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯</a><br><a href="https://zhuanlan.zhihu.com/oldtimes?topic=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F" target="_blank" rel="external">小楼昨夜又秋风 - 知乎专栏</a><br><a href="https://www.zhihu.com/" target="_blank" rel="external">知乎</a><p></p>
<p></p><h3 id="前端综合类" style="background-color: #eee;padding-top: 0;text-align: center;">前端综合类</h3><a href="http://www.kancloud.cn/explore" target="_blank" rel="external">广场 - 看云</a><br><a href="http://luuman.github.io/FrontEndGuide/V1/index.html#page_8" target="_blank" rel="external">前端导航</a><br><a href="https://news.ycombinator.com/news" target="_blank" rel="external">黑客新闻</a><br><a href="https://www.infoq.com/" target="_blank" rel="external">InfoQ中文站</a><br><a href="https://aotu.io/" target="_blank" rel="external">Aotu.io「凹凸实验室」</a><br><a href="http://codepen.io/2013/popular/pens/" target="_blank" rel="external">Top Pens of 2013 on CodePen</a><br><a href="http://www.html5tricks.com/" target="_blank" rel="external">HTML5资源教程</a><br><a href="http://www.j--d.com/page/2" target="_blank" rel="external">html5前端开发技术分享网</a><br><a href="http://www.qdfuns.com/" target="_blank" rel="external">前端网（QDFuns）</a><br><a href="http://bennettfeely.com/gradients/" target="_blank" rel="external">CSS Gradients with background-blend-mode</a><br><a href="http://www.cssmagic.net/demo/20090215-arc-nav/index.html###" target="_blank" rel="external">CSS魔法 - 弧形排列的可折叠二级导航</a><br><a href="http://www.codeweblog.com/" target="_blank" rel="external">编程之家</a><br><a href="http://techbrood.com/" target="_blank" rel="external">踏得网</a><br><a href="http://www.jeffjade.com/2016/03/30/104-front-end-tutorial/" target="_blank" rel="external">晚晴幽草轩</a><p></p>
<p></p><h3 id="前端工具类" style="background-color: #eee;padding-top: 0;text-align: center;">前端工具类</h3><a href="http://www.swiper.com.cn/demo/index.html" target="_blank" rel="external">Swiper中文网</a><br><a href="http://www.tuhaokuai.com/" target="_blank" rel="external">图片压缩</a><br><a href="http://laydate.layui.com/" target="_blank" rel="external">日期控件与时间插件</a><br><a href="http://www.pc6.com/mach/macsvn/" target="_blank" rel="external">mac svn客户端</a><br><a href="https://modao.cc/signin#start" target="_blank" rel="external">墨刀</a><br><a href="http://tools.jb51.net/regex/javascript" target="_blank" rel="external">JavaScript正则在线测试工具</a><br><a href="http://css3test.com/" target="_blank" rel="external">CSS3的测试</a><br><a href="http://www.bejson.com/" target="_blank" rel="external">你的浏览器支持 ES6 吗？ - ES-Checker</a><br><a href="http://tool.oschina.net/commons?type=4" target="_blank" rel="external">ASCII码对照表</a><br><a href="http://www.sdifenzhou.com/" target="_blank" rel="external">史蒂芬周的博客</a><br><a href="https://avocode.com/" target="_blank" rel="external">Avocode - PSD</a><p></p>
<p></p><h3 id="Node类" style="background-color: #eee;padding-top: 0;text-align: center;">Node类</h3><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a><br><a href="http://cnodejs.org/topic/523513d3101e57452141d0b1" target="_blank" rel="external">CNode技术社区</a><p></p>
<p></p><h3 id="面试题类" style="background-color: #eee;padding-top: 0;text-align: center;">面试题类</h3><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="external">前端开发面试题小集</a><br><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese#fun-questions" target="_blank" rel="external">前端工作面试问题小集</a><br><a href="https://segmentfault.com/a/1190000002627927" target="_blank" rel="external">我是如何同时拿到阿里和腾讯offer的 - Web开发手记 - SegmentFault</a><br><a href="https://www.nowcoder.com/ta/front-end-interview" target="_blank" rel="external">前端面试经典题目合集_牛客网</a><br><a href="http://blog.imcyk.com/?id=3" target="_blank" rel="external">web前端面试题目-朝圣言</a><br><a href="http://www.cnblogs.com/coco1s/p/4029708.html" target="_blank" rel="external">BAT及各大互联网公司2014前端笔试面试题–JavaScript篇 - ChokCoco</a><br><a href="http://blog.csdn.net/kongjiea/article/details/46341575" target="_blank" rel="external">前端面试题 - kongjiea笔记 - 博客频道</a><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;h3 id=&quot;学习类&quot; style=&quot;background-color: #eee;padding-top: 0;text-align: center;&quot;&gt;学习类&lt;/h3&gt;&lt;a href=&quot;http://www.w3school.com.cn/&quot;&gt;w3school&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cmark.com/&quot;&gt;w3cmark&lt;em&gt;前端笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cricode.com/&quot;&gt;快课网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lib.csdn.net/bases?page=2&amp;type=all#md&quot;&gt;知识库 - CSDN&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://am-team.github.io/amg/dev-exp-doc.html&quot;&gt;无线Web开发经验谈&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.gbtags.com/gb/index.htm&quot;&gt;极客标签&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weekly.manong.io/issues/&quot;&gt;往期回顾&lt;/em&gt;码农周刊&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.imooc.com/&quot;&gt;慕课网&lt;/a&gt;
    
    </summary>
    
      <category term="前端网址" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%BD%91%E5%9D%80/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
