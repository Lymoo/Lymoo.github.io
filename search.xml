<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[JavaScript的一些基本知识 -- DOM操作]]></title>
      <url>%2F2017%2F03%2F02%2FJavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20DOM%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[Dom基本操作获取节点一、document1.querySelectorAll根据CSS里面的选择器来获取一组元素(获取的是数组)用法：document.querySelectorAll(“选择器”);选择器可以是后代选择器，群组选择器，nth-child(1)等等获取的数组不会随着dom的操作发生变化而变化 2.querySelector获取querySelectorAll获取到的第一个元素用法：document.querySelector(“选择器”); 3.通过元素ID获取节点用法：document.getElementById(“元素ID”); 4.通过类名获取节点用法：document.getElementsByClassName(“元素类名”);通过类名获取节点(获取的是动态数组)动态数组会跟随dom操作发生变化之后做出相应的变化 5.通过元素标签名获取节点用法：document.getElementsByTagName(“元素标签名”);通过元素标签名获取的也是动态数组 6.通过name属性来获取节点用法：document.getElementsByName(“name值”);通过name属性获取的也是动态数组 二、节点指针1.获取元素的首个子节点用法：父节点.firstChild; 2.获取元素的最后一个子节点用法：父节点.lastChild; 3.获取元素的子节点列表用法：父节点.childNodes; 4.获取已知节点的前一个节点用法：兄弟节点.previousSibling; 5.获取已知节点的后一个节点用法：父节点.nextSibling; 6.获取已知节点的父节点用法：父节点.parentNode; 节点操作一、创建节点1.创建属性节点用法：document.createAttribute(“创建的元素属性”); 2.创建文本节点用法：document.createTextNode(“创建的文本内容”); 3.创建元素节点用法：document.createElement(“创建的元素标签名”); 二、删除节点删除指定的节点用法：removeChild(要删除的节点名); 三、替换节点将某个子节点替换为另一个用法：replaceChild(新节点, 原节点); 四、插入节点1.向节点的子节点列表的末尾添加新的子节点用法：appendChild(所添加的新节点); 2.在已知的子节点前插入一个新的子节点用法：insertBefore(新节点, 原节点) 五、复制节点复制节点标签用法：cloneNode(bool);哪个节点调用就复制哪个，true代表深复制，会复制子节点树，false代表浅复制，只复制本身 节点属性一、获取属性获取元素节点中指定属性的属性值用法：元素节点.getAttribute(元素属性名); 二、设置属性创建或改变元素节点的属性用法：元素节点.setAttribute(属性名, 属性值); 三、删除属性删除元素中的指定属性用法：元素节点.removeAttribute(属性名); 文本操作1.从指定的位置插入字符串用法：insertData(offset, string); 2.从指定的位置起删除一些字符用法：deleteData(offset, count); 3.将字符串插入到文本尾部用法：appendData(string); 4.从指定的位置起将文本节点分成两个节点用法：splitData(offset); 5.从指定的位置起将一些字符用其他字符串代替用法：replaceData(offset, count, string); 6.从指定的位置起返回一些节点用法：substringData(offset, count);博主自己整理的一些JavaScript中Dom的基础知识]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript的一些基本知识 -- 数组]]></title>
      <url>%2F2017%2F03%2F01%2FJavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20%E6%95%B0%E7%BB%84%2F</url>
      <content type="text"><![CDATA[JavaScript的数组数组的创建方法1.创建空数组1var arr = new Array(); 2.创建指定元素的数组1var arr = new Array(元素1, 元素2…); 3.单维数组1var arr = [元素1, 元素2...]; 4.多维数组1var arr = new Array([数组1], [数组2]…); 数组的长度array.length返还数组的长度 数组的基本操作获取数组元素注意：数字的下标是从0开始计算的！ 单维数组数组名[下标索引值] 多维数组数组名[外层下标索引值][内层下标索引值] 增加数组使用“[]”指定一个新的下标 删除数组delete 数组名[下标]; 遍历数组使用for…in…来遍历1for (var i in Array) 数组的一些方法添加1.在数组末尾添加数组push(); 2.在数组头部添加数组unshift(); 删除1.从数组头部删除一个元素shift(); 2.从数组尾部删除一个元素pop(); 截取slice(起始位置, 结束位置);两个参数分别代表要获取的数组的起始位置和结束位置。可以用-1代表倒数第一个，-2代表倒数第二个 splice方法①.splice(起始位置，删除的长度)例如：123var math = [90, 88, 30, 45, 54, 98, 66, 76];math.splice(0, 2);console.log(math); // 打印结果为[30, 45, 54, 98, 66, 76] ②.splice(起始位置,删除长度为0,要添加的元素1,要添加的元素2…..）例如123var math = [90, 88, 30, 45, 54, 98, 66, 76];math.splice(0, 0, 10, 12,65);console.log(math); [10, 12, 65, 90, 88, 30, 45, 54, 98, 66, 76] 排序排序不按照数值大小，而是把元素看出一个字符串，按照首字母来排sort();将数组中元素的顺序颠倒reverse(); 拼接concat();数组拼接，数组不会在原有的数组上进行拼接，而是返回一个拼接之后的新数组。123456var test = [1, 2, 3]var test2 = [4, 5, 6]var a = test.concat(test2);console.log(test); // [1, 2, 3]console.log(test2); // [4, 5, 6]console.log(a); // [1, 2, 3, 4, 5, 6] 转换使用数组的join();方法，可以把这个数组用一个字符串来连接起来，然后返回一个新的字符串，原来的数组不会发生变化。 数组小结博主自己整理的一些JavaScript中数组的知识 注意点数组直接赋值的时候是-地址引用基本数据类型赋值是-值拷贝对象类型赋值是-地址引用]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript的一些基本知识 -- 字符串]]></title>
      <url>%2F2017%2F02%2F28%2FJavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%20--%20%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
      <content type="text"><![CDATA[JavaScript的字符串转化为字符串toString();12var num = 10;var str = num.toString(); 创建字符串1var str = new String(&quot;123456&quot;); 查找方法1.charAtcharAt();去字符串里面寻找下标为括号内传入的参数的字符，从零开始，空格也算做字符。12var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;console.log(str.charAt(15)); // 打印结果为m 2.searchsearch();在字符串中，搜索某个单词，然后返回这个单词在字符串中首字母的位置，搜索不到返回 -1，出现多个匹配的字符串之后，只返回第一个的位置。12var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;console.log(str.search(&quot;you&quot;)); // 打印结果为8 3.indexOfindexOf();从前往后获取字符串的位置，如果没有则返回-112var str = &quot;adssddsssdfsa&quot;;console.log(str.indexOf(&quot;a&quot;)); // 打印结果为0 4.lastIndexOflastIndexOf();从后往前从前往后获取字符串的位置，如果没有则返回-112var str = &quot;adssddsssdfsa&quot;;console.log(str.lastIndexOf(&quot;a&quot;)); // 打印结果为12 截取字符串substringsubstring(起始位置, 结束位置);截取字符串，给一个参数的时候代表，从这个位置开始，截取到字符串结束。给两个参数的时候，一个代表起始位置，一个代表结束位置(不包含最后一个位置)。123var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;var str2 = str.substring(4, 11);console.log(str2); // 打印结果为are you substrsubstr(起始位置, 截取长度);截取字符串，第一个参数代表其实位置，第二个字符串代表截取的长度。123var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;var str2 = str.substr(4, 7);console.log(str2); // 打印结果为are you 替换字符串replacereplace(替换的值, 被替换的值);字符串替换，把前面的替换成后面的，只会替换第一个。12var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;var str2 = str.replace(&quot;you&quot;, &quot;ni&quot;); splitsplit();把一个字符串按照参数分割成N个元素的数组。12var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;var str2 = str.split(&quot;,&quot;); // 打印结果为[&quot;how are you&quot;, &quot; i&apos;m fine thank you&quot;, &quot; and you&quot;] 字符串的拼接concatconcat();将一个字符串或多个字符串拼接起来，获得一个新的字符串123var str = &quot;how are you, i&apos;m fine thank you, and you&quot;;var str2 = &quot;--------Hello!&quot;;console.log(str.concat(str2)); // 打印结果为how are you, i&apos;m fine thank you, and you--------Hello! 字符串的转换方式toLowerCasetoLowerCase();方法返回一个字符串，该字符串中的字母被转换成小写。 toUpperCasetoUpperCase();方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。 字符串小结博主自己整理的一些JavaScript中字符串的知识]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ajax的探索]]></title>
      <url>%2F2017%2F02%2F24%2FAjax%E7%9A%84%E6%8E%A2%E7%B4%A2%2F</url>
      <content type="text"><![CDATA[什么是AjaxAjax的全称是Asynchronous JavaScript And XML(异步Javascript和XML)。它不是一项新的技术，而是由多种技术组合而成。 Ajax的关键技术1.Javascript脚本语言2.XMLHttpRequest对象3.可扩展标记语言(XML) JSON4.文档对象模型(DOM)5.层叠样式表(CSS) 前后台通讯封装一个Ajax的方法这里名字为GetAndPost.js内容展示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758function toUrl(url,data)&#123; var time = new Date().getTime(); data.time = time; var arr = []; ///存储经过遍历之后形成的名和值的字符串 for(var i in data)&#123; var str = i + &quot;=&quot; + data[i]; arr.push(str); &#125; var str = arr.join(&quot;&amp;&quot;); var path = url + &quot;?&quot; + str; return path;&#125;function fnAjax(obj)&#123; // 兼容浏览器写法 if (window.XMLHttpRequest) &#123; var ajax = new XMLHttpRequest(); &#125; else &#123; var ajax = new ActiveXObject(&quot;MSXML2.XMLHTTP&quot;); &#125; var data = obj.data || &#123;&#125;; var succFn = obj.succFn || false; var failFn = obj.failFn || false; var path = toUrl(obj.url,data); var pathArr = path.split(&quot;?&quot;); var time = new Date().getTime(); var type = obj.type || &quot;get&quot;; if (type == &quot;get&quot;) &#123; ajax.open(&quot;GET&quot;, path, true); ajax.send(null); &#125; else &#123; ajax.open(&quot;POST&quot;, pathArr[0], true); ajax.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;); ajax.send(pathArr[1]); &#125; // 对状态的检测 ajax.onreadystatechange = function()&#123;// console.log(ajax.readyState); //当前的请求状态 if (ajax.readyState == 4) &#123; // console.log(&quot;请求成功了&quot;); // console.log(ajax.status); //请求结果的状态码 if (ajax.status &gt;= 200 &amp;&amp; ajax.status &lt;= 207 || ajax.status == 304) &#123; if (succFn) &#123; succFn(ajax.responseText); &#125; &#125; else &#123; if (failFn) &#123; failFn(ajax.status); &#125; &#125; &#125; &#125;;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP基础(四)]]></title>
      <url>%2F2017%2F02%2F24%2FPHP%E5%9F%BA%E7%A1%80(%E5%9B%9B)%2F</url>
      <content type="text"><![CDATA[PHP的文件上传这里还是举例子说明创建两个页面，一个fileup.html和一个fileup.phpfileup.html代码如下：12345678910111213141516&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--enctype是设置编码格式的--&gt; &lt;form action=&quot;fileup.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;!--限制上传的最大大小--&gt; &lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; id=&quot;MAX_FILE_SIZE&quot; value=&quot;300000&quot; /&gt; &lt;input type=&quot;file&quot; name=&quot;fileup&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; fileup.php代码如下：1234567891011121314151617181920212223242526272829&lt;?php date_default_timezone_set(&apos;PRC&apos;); // 设置默认时区 $file = $_FILES[&quot;fileup&quot;]; // 根据错误码，判断是否上传成功 if ($file[&quot;error&quot;] == 0) &#123; // 根据类型判断是图片还是其他 $imgArr = array(&quot;image/jpeg&quot;,&quot;image/png&quot;,&quot;image/gif&quot;); if (in_array($file[&quot;type&quot;], $imgArr)) &#123; $type = explode(&quot;/&quot;, $file[&quot;type&quot;])[1]; if ($type == &quot;jpeg&quot;) &#123; $type = &quot;jpg&quot;; &#125; $time = time(); // 时间戳，以秒为单位 $time = date(&quot;YmdHis&quot;, $time); // 设置显示时间的格式 // 若要放到其他文件夹 $name = &quot;../2.21php4/&quot;.$time.&quot;.&quot;.$type; $bol = move_uploaded_file($file[&quot;tmp_name&quot;], $name); if ($bol) &#123; echo &quot;移至服务器成功&quot;; &#125; else &#123; echo &quot;移至失败&quot;; &#125; &#125; else &#123; echo &quot;不是图片&quot;; &#125; &#125; else &#123; echo &quot;上传失败&quot;; &#125;?&gt; PHP的正则表达式查找匹配1234$reg = &quot;/\d+/&quot;;$str = &quot;asda4 244g h64 485 14&quot;;echo preg_match($reg, $str); // 返回匹配的次数echo preg_match_all($reg, $str); // 返回匹配次数，多次匹配 替换匹配123$reg = &quot;/\d+/&quot;;$str = &quot;asda4 244g h64 485 14&quot;;$str = preg_replace($reg, &quot;*&quot;, $str); 分隔字符串1234$reg = &quot;/\d+/&quot;;$str = &quot;asda4 244g h64 485 14&quot;;$arr = preg_split(&quot;/\s/&quot;, $str);var_dump($arr); 小练习返回数组中能与正则进行匹配的每一项，并以数组进行输出123$arr = array(&quot;514ada&quot;, &quot;Asda5a153&quot;,&quot;awda6531&quot;);$str = preg_grep(&quot;/\d+/&quot;, $arr);var_dump($str); mysql数据库PS：博主用的是XAMPP自带集成的MySql 第一步 连接数据库参数分别为主机名，用户名，密码1234567$mysql = mysql_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;);if (!$mysql) &#123; echo &quot;连接失败&quot;; exit(); // 退出后面的执行&#125; else &#123; echo &quot;连接成功&quot;;&#125; 第二步 选择需要的数据库mysql_select_db(“20170222”); // 数据库名mysql_query(“set names utf8”); // 编码格式设置为utf-8 第三步 进行增删改的操作1）查询语句1234567// SELECT（字段名） FROM （数据表名）（查询的限制条件）$sql = &quot;SELECT * FROM userinfo&quot;;// 限制条件有WHERE语句，LIMIT语句，ORDER BY语句// 例：$sql = &quot;SELECT * FROM userinfo WHERE id=3&quot;;// $sql = &quot;SELECT * FROM userinfo LIMIT 1, 2&quot;; 1表示从第二条查找，2表示查找出来两条// $sql = &quot;SELECT * FROM userinfo ORDER BY age asc&quot;; 按照年龄升序，asc是默认的升序$result = mysql_query($sql); 2） 插入语句1$sql = &quot;INSERT INTO userinfo (id, user, pass, age, sex) VALUES (NULL, &apos;测试&apos;, &apos;test&apos; , 100, &apos;男&apos;)&quot;; 3） 更新语句1$sql = &quot;UPDATE userinfo SET username = &apos;admin1&apos;, passwd =&apos;12345678&apos; WHERE id = 10; 4） 删除语句1$sql = &quot;DELETE FROM user WHERE id = 10&quot;; 第四步 对操作结果进行处理1） 以索引数组的形式输出while ($arr = mysql_fetch_row($result)) { var_dump($arr);} 2） 以关联数组形式进行返回while ($arr = mysql_fetch_assoc($result)) { var_dump($arr);} 3） 以关联数组和索引数组的形式输出while ($arr = mysql_fetch_array($result)) { var_dump($arr);} 4） 以对象的形式进行输出while ($obj = mysql_fetch_object($result)) { var_dump($arr);} 第五步 关闭数据库mysql_close();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mac搭建一个属于自己的hexo博客(github page)]]></title>
      <url>%2F2017%2F02%2F22%2Fmac%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[1.本地环境的安装安装node.jsnode.js的官网 安装gitgit的官网 安装hexohexo是基于node.js的静态博客。在你想创建博客的路径下创建一个blog文件夹（这里文件名随意）。然后打开MAC电脑的终端，进入到这个文件夹(博主是创在根目录下所以直接cd blog就能进入)接着输入$ sudo npm install -g hexo;此时hexo已经装好了，再输入$ hexo init初始化文件夹会将github上的所有hexo的初始化项目下载到该文件夹下1INFO Start blogging with Hexo! 显示这行代码就说明初始化成功了此时我们可以先试一下输入$hexo g部署形成文件然后等它部署好之后再输入$hexo s开启本地测试（退出就按Ctrl+C）此时打开浏览器输入http://localhost:4000/，可以进行查看我们的初始页面效果如下：至此，我们的环境都已经安装完成了，让我们进行下一步吧！ 2.注册github如果已经有账号了可以直接往下看，打开github官网进行注册登录登录之后出现如下界面，点击Start a project然后在Repository name中填入你的Owner的用户名在加上.github.io，然后这就是你的域名了（这里由于博主已经创建过一个一样的库了所以提示错误），然后点击下面的按钮接着点击页面右上角你的头像选择your profile进入下面页面，选择刚才创建的库进入之后选择Settings选项卡，下拉至GitHub Pages栏目中将Source里选择master branch，如果已经是这个选项，就不需要更改 3.配置Github SSH keys我们需要给我们的MAC添加SSH Keys，让Github能够绑定到我们这台电脑上，能够直接提交传送修改项目。 ①.首先先查看一下本机是否有过SSH KEY的设置在终端输入cd ~/.ssh 或cd .ssh如果是第一次设置则会显示No such file or directory如果有配置过则进入~/.ssh路径下输入ls查看当前路径文件，再用rm*删除所有文件 ②.设置SSH KEY在终端中进行如下配置：123456789101112131415161718192021222324252627282930313233343536$ cd ~ #保证当前路径在”~”下$ ssh-keygen -t rsa -C &quot;xxxxx@xx.xxx&quot; #引号里将xxx换成你注册的邮箱地址Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa): #不填直接回车Enter passphrase (empty for no passphrase): #输入密码（可以为空）Enter same passphrase again: #再次确认密码（可以为空）Your identification has been saved in /Users/xxxx/.ssh/id_rsa. #生成的密钥Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub. #生成的公钥The key fingerprint is:SHA256:plEUOl2Syg3KprBZYAwCuxa7V2ELo2GqCaAg3ERnY0M xxxxxxx@xxx.xxxThe key&apos;s randomart image is:+---[RSA 2048]----+|B .o.E +o. ||++o + ++.o ||** = =o+o ||O.* B =o. ||=O o o. S ||*.o . + ||o. . . || . || |+----[SHA256]-----+$ vim ~/.ssh/id_rsa.pub #编译代码 将上面图形转换成代码ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+7F3/3/gA6GFwKyhIONc+fZu5Re/Y2SzeGRNbg/qxxxx5KrQw/JxxxA2qh7xxxxxxxxxxxxpXBiIn+7MI4Pfd9ZaUFfjQ7fQPNhZ1gs1GFtLXTaJ2RAvnBY6/hqPxkQqp8qkOaEbUtyrKciW+YXs/Qux/d2hnwj3F/dvfQ5JjFlbBNydkNJKat3wU7BKL5TIffMPzdnL/Ir5y0h5apcp4l0wruQzkXKHcMgI4ltYqOscqu4nawzZII3wiwxAcFd+0BeboCs+BP7U/iXpKyxOa9Br8sFMU/q7O/i7RcBufEg5W9wxkWB3i0QRmRyctLOj8yvXCBM4KnL6Amz xxxxxx@xxxx.xxxx~~~# 这是已经生成好ssh key，其存放路径为：/Users/你电脑的用户名/.ssh/下。# 可以直接将ssh-rsa至@xxxx.xxxx这一大段复制下来 ③.绑定Github上的SSH KEY返回刚才的Github页面点击右上角的头像边上的小三角选择Settings在左侧选择SSH and GPG Keys栏，然后点击News SSH KeyTitle里可以自定义填入，Key里就把之前从”ssh-rsa至xxxxx@xxxx.xxxx”这一大串复制进去，然后点击Add SSH Key即可添加完成 ④.配置用户名和邮箱返回终端进行如下操作设置你的用户名和邮箱地址：12$ git config --global user.name “your_username” #引号里设置用户名$ git config --global user.email “your_registered_github_Email” #引号里设置设置邮箱地址(建议用注册giuhub的邮箱) ⑤.检测SSH Key是否配置成功在终端输入$ssh -T git@github.com出现如下字段则说明配置成功Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.至此我们已经完成了与github的绑定 4.设置hexo博客的配置文件找到你创建的博客的位置，打开其文件夹下的_config.yml文件将其拉到最后找到deploy字段，进行如下设置：1234deploy: type: git repository: https://github.com/你自己的Github用户名//你自己的Github用户名/.github.io branch: master 如果想了解更多可以查看hexo官网 5.上传博客这里我们需要安装一下git的上传代码插件进入终端输入$ npm install hexo-deployer-git --save接着我们就可以上传我们的博客了依次输入1234$hexo clean #清除网页的缓存$hexo g #生成静态页面至public目录$hexo s #会开通本地测试的接口$hexo d #将.deploy目录部署到GitHub 如果最后出现INFO Deploy done: git则说明上传成功 此时就大功告成了！你可以去打开浏览器访问一下你创建的Github pages地址(你的Github用户名.github.io)，然后就能够看到你本地的hexo博客已经被部署到github上去了。而且此时博客的默认主题是landscape，就是之前本地测试时的样子，如果想要更换主题可以访问hexo的主题 6.发布文章在终端输入$hexo new &quot;文章名&quot;然后就能看到在你博客文件夹下的/source/_posts/下面会看到你新建的博客注意这里的博客是markdown格式的以.md为后缀名的文件，如果想学习下怎么使用可以查询一下markdown的书写格式，同时markdown也是兼容html的书写方式。文章写完之后在终端输入12$hexo g$hexo d 重新发布即可！ 7.小结博主整理了下全部流程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP制作一个用户登记表]]></title>
      <url>%2F2017%2F02%2F22%2FPHP%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E7%99%BB%E8%AE%B0%E8%A1%A8%2F</url>
      <content type="text"><![CDATA[展示单行的用户信息表首先我们需要创建两个文件，一个为html文件，一个为php文件。这里博主就创建了form.html和formHandle.php两个文件。下面展示一下两个文件的内容：form.html的文件内容：123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;user&quot; value=&quot;&quot; /&gt;&lt;br/&gt; 密码：&lt;input type=&quot;password&quot; name=&quot;pass&quot; value=&quot;&quot; /&gt;&lt;br/&gt; 性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;0&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;1&quot; /&gt;女&lt;br/&gt; 兴趣：&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;0&quot; /&gt;写代码 &lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;1&quot; /&gt;修改代码 &lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;2&quot; /&gt;上传代码&lt;br/&gt; 城市：&lt;select name=&quot;city&quot;&gt; &lt;option value=&quot;0&quot;&gt;上海&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;杭州&lt;/option&gt; &lt;/select&gt;&lt;br/&gt; 简介：&lt;textarea name=&quot;intro&quot;&gt;&lt;/textarea&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 效果展示：这里要注意的是类似性别，兴趣，城市这三类我们可以用value数值传入0，1，2来代表用户分别选的不同的选项。兴趣部分，因为是多选，所以我们需要传入一个数组来方便我们展示，所有name属性写的是hobby[]来记录。formHandle.php的文件内容：1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?php $inf = $_GET;?&gt;&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;性别&lt;/td&gt; &lt;td&gt;兴趣&lt;/td&gt; &lt;td&gt;城市&lt;/td&gt; &lt;td&gt;简介&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $inf[&quot;user&quot;] ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $inf[&quot;pass&quot;] ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php $sexArr = array(&quot;男&quot;,&quot;女&quot;); echo $sexArr[$inf[&quot;sex&quot;]]; ?&gt; &lt;/td&gt; &lt;td&gt;&lt;?php $hobbyArr = array(&quot;写代码&quot;,&quot;修改代码&quot;,&quot;上传代码&quot;); foreach ($inf[&quot;hobby&quot;] as $value) &#123; echo $hobbyArr[$value].&quot; &quot;; &#125; ?&gt; &lt;/td&gt; &lt;td&gt;&lt;?php $cityArr = array(&quot;上海&quot;,&quot;杭州&quot;); echo $cityArr[$inf[&quot;city&quot;]]; ?&gt; &lt;/td&gt; &lt;td&gt;&lt;?php echo $inf[&quot;intro&quot;] ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 接下来我们来测试一下：最终效果为：这里博主提问一个问题，以上方法每次只能够保存一个用户的信息，如果想展示多行的用户信息该怎么办呢？ 展示多行的用户信息表有经验的后台人士就会说了这时候就需要一个数据库来存入信息了，这里由于博主也是刚学PHP，就用txt文件来代替一下数据库了。这里form.html中的&lt;form action=&quot;test2.php&quot; method=&quot;get&quot;&gt;然后建立一个text2.php文件，再建立一个存储用户信息的userinfo.txt和相对应做操作的userinfo.php两个文件，一共三个文件。text2.php的文件内容：123456&lt;?php $str = json_encode($_GET); $fh = fopen(&quot;userinfo.txt&quot;, &quot;a&quot;); fwrite($fh, $str.&quot;\n&quot;); fclose($fh); ?&gt; 这里面由于用户提交到后台的信息为数组所以需要转换成json类型的字符串，用到了json_encode();的方法，再把用户提交的个人信息保存到userinfo.txt的文件中。 userinfo.php的文件内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 &lt;?php // 用户信息的展示页 （把信息存文件里读取出来） $fh = fopen(&quot;userinfo.txt&quot;, &quot;r&quot;);?&gt;&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;性别&lt;/td&gt; &lt;td&gt;爱好&lt;/td&gt; &lt;td&gt;城市&lt;/td&gt; &lt;td&gt;简介&lt;/td&gt; &lt;/tr&gt; &lt;?php while ($info = fgets($fh)) &#123; $info = (array)json_decode($info); ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $info[&quot;user&quot;]; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $info[&quot;pass&quot;]; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php $sexArr = array(&quot;男&quot;, &quot;女&quot;); echo $sexArr[$info[&quot;sex&quot;]]; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php $loveArr = array(&quot;听音乐&quot;, &quot;看书&quot;, &quot;打球&quot;); foreach ($info[&quot;love&quot;] as $value) &#123; echo $loveArr[$value]; &#125; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php $cityArr = array(&quot;北京&quot;, &quot;上海&quot;, &quot;广州&quot;); echo $cityArr[$info[&quot;city&quot;]]; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $info[&quot;intro&quot;]; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php &#125; ?&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 这下可以尝试在form.html页面多输入几个用户的信息 展示效果为：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP基础(三)]]></title>
      <url>%2F2017%2F02%2F21%2FPHP%E5%9F%BA%E7%A1%80(%E4%B8%89)%2F</url>
      <content type="text"><![CDATA[PHP文件的操作 打开文件$fh = fopen("test.txt", "a"); 读取文件1.fread$str = fread($fh, filesize("test.txt")); filesize是获取文件的大小，返回的类型是字符串 2.fgets fgets只返回一行，返回的类型也是字符串再次返回就从下一行开始 $str = fgets($fh);$str = fgets($fh); 3.file注意file返回的类型是数组 $arr = file("test.txt"); 4.file_get_contents用file_get_contents获取文件内容，也会返回出字符串，还可以用绝对路径打开一个网页 $str = file_get_contents("test.txt");$str = file_get_contents("https://www.baidu.com"); 文件写入1.fwritefwrite($fh, "我是写入的内容"); 2.file_put_contentsfile_put_contents("test.txt", "我是put进去的"); 关闭文件fclose($fh); 复制文件copy(需要复制的文件, 新的文件名);copy(&quot;test.txt&quot;, &quot;test2.txt&quot;); 重命名文件rename(原文件名, 新文件名);rename(&quot;test2.txt&quot;, &quot;rename.txt&quot;); 删除文件unlink(需要删除的文件名);unlink(&quot;test.txt&quot;); PHP获取PV什么是PV？PV（page view）即页面浏览量这里博主介绍一下最简单的记录PV的原理以及方法原理：通过判断是否存在记录pv量的文件，如果没有就创建，并在文件里写入1，如果有，就获取文件里的数值，并加1，再写入文件。123456789if (file_exists(&quot;pv.txt&quot;))&#123; $str = file_get_contents(&quot;pv.txt&quot;); $str++; echo &quot;当前的PV量是&quot;.$str; file_put_contents(&quot;pv.txt&quot;, $str);&#125; else &#123; echo &quot;当前的pv量是1&quot;; file_put_contents(&quot;pv.txt&quot;, 1);&#125;PHP对文件目录的操作 打开目录$dh = opendir("."); 读取文件如同fgets，第一次只读取第一个，第二次到第二个依次类推$str = readdir($dh);可以使用while循环来读取123while ($file = readdir($dh)) &#123; echo $file.&quot;&lt;hr/&gt;&quot;;&#125; 将目录以数组的形式全部返回出来 $fileArr = scandir("."); print_r($fileArr); 关闭目录closedir($dh); 创建文件mkdir("test"); 删除文件rmdir(“test”); 以表格的形式展示出文件目录这里博主就不多说了直接上例子！123456789101112131415161718192021&lt;?php $dh = opendir(&quot;.&quot;);?&gt;&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;?php while ($file = readdir($dh)) &#123; echo &quot;&lt;tr&gt;&quot;; echo &quot;&lt;td&gt;&#123;$file&#125;&lt;/td&gt;&quot;; echo &quot;&lt;/tr&gt;&quot;; &#125; ?&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;这种方式运行出的结果是一样的1234567891011121314151617181920212223&lt;?php $dh = opendir(&quot;.&quot;);?&gt;&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;?php while ($file = readdir($dh)) &#123; ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $file; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php &#125; ?&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;第三种显示目录的方式123456789101112131415161718192021222324252627282930&lt;?php @$url = $_GET[&quot;url&quot;]; // @符号可以抑制报错，前提是这个错误不影响整个程序运行 echo $url; if ($url) $dh = opendir($url); else $dh = opendir(&quot;.&quot;); ?&gt;&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=&quot;1&quot;&gt; &lt;?php while ($file = readdir($dh)) &#123; ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?php echo $file; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php &#125; ?&gt; &lt;/table&gt; &lt;a href=&quot;showDir3.php?url=..&quot;&gt;链接到上一层&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;PHP文件目录的一些操作 获取上一次的访问时间fileatime();1234date_default_timezone_set(&apos;PRC&apos;); // 设置默认时区$time = fileatime(&quot;file.php&quot;); // 时间戳单位是秒$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式echo $time; 获取上一次的修改时间filemtime();123$time = filemtime(&quot;file.php&quot;); // 时间戳单位是秒$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式echo $time; 获取上一次Innode的修改时间filectime();ps:Innode包括修改权限等等123$time = filectime(&quot;file.php&quot;); // 时间戳单位是秒$time = date(&quot;Y-m-d H:i:s&quot;, $time); // 设置打印出来的时间的格式echo $time; 获取文件名basename();注意它获取的是一个文件的文件名+后缀扩展名1234$path = $_SERVER[&apos;REQUEST_URI&apos;]; // 获取服务器中的文件路径$path = __FILE__; // 获取服务器根路径文件路径$basename = basename($path); // 获取文件名print_r(pathinfo($path)); // 返回的是数组 PHP文件的权限修改chomd();用法：chomd(文件，八进制组成的权限)权限由4位八进制组成，第一个是0，表示这是一个八进制，第二位代表是所有者的权限，第三位是所有者所在组的权限，第四位是任何人的权限，权限有1，2，4组成，可累加进行权限的叠加，1代表可执行权限、2代表可写权限、4代表可读权限例如要设置所有者可读可写，所有者所在组可执行可写，任何人可执行可读chmod(&quot;file.php&quot;, 0635);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP基础(二)]]></title>
      <url>%2F2017%2F02%2F21%2FPHP%E5%9F%BA%E7%A1%80(%E4%BA%8C)%2F</url>
      <content type="text"><![CDATA[PHP的字符串首先来区别一下下面两种字符串:echo “hello”.”world”;echo “hello”,”world”;注意:这里第一条是一个字符串，第二条是两个字符串 字符串的查找这里用strpos();命令用法：strpos(要操作的字符串，要查找的字符)返回查找字符的位置$str = “hello world”;echo strpos($str, “w”); // 返回的是第一次查找的位置 输出6echo stripos($str, “W”); // stripos是不区分大小写的查找 也是输出6字符串的替换这里用str_replace();命令替换字符串的匹配内容用法：str_replace(匹配内容,替换内容,字符串)$str = str_replace(“l”, ““, $str); // 能将全部查找的到的都进行替换echo $str; // 输出he**o word$str = str_ireplace(“L”, ““, $str); // 同样不区分大小写echo $str; // 输出he**o word字符串的截取这里有substr();命令截取用法：substr(字符串,截取的起始长度(可以为负数),截取的长度)$str = “hello world”;$str = substr($str, 3); // $str为lo world$str = substr($str, 3, 7); // $str为lo worl$str = substr($str, -4, 3); // $str为orl字符串的截取2PHP也有第二种截取命令strstr();strstr(字符串,截取的字符)$str = “hello world”;$str = strstr($str, “ll”);$str = stristr($str, “LL”); // 不区分大小写字符串的去除空格这里有ltrim();rtrim();trim();三种方法。分别是去除左边空格，去除右边空格，和去除两边空格$str = “ hello “;$str = ltrim($str); // 去除左边的空格$str = rtrim($str); // 去除有边的空格$str = trim($str); // 去除所有空格获取字符串长度用strlen();来获取$str = “wwwwwwwww”;echo strlen($str); // 这里输出为8字符串的大小写转换及反转1.转换成小写$str = “ABCD”;echo strtolower($str); // 输出结果为abcd2.转换成大写$str = “abcd”;echo strtoupper($str); // 输出结果为ABCD3.反转$str = “abcd”;echo strrev($str); // 输出结果为ABCD去除字符串中的标签strip_tags();字符串的换行符nl2br();$str = “AB\nCD”;echo nl2br($str); // 输出结果为AB //CDPHP的数组数组的创建PHP的数据创建有三种方式：1.array();创建$fruit = array(“apple”, “orange”, “banana”);$fruit[] = “pear”; // 在数组最后添加$language = array(“en” =&gt; “English”, “ch” =&gt; “Chinese”);//“en”为键，”English”为值$language[“fr”] = “French”; // 在数组最后添加2.直接赋值$fruit[] = “orange”;$fruit[] = “banana”;3.rang();创建$num = range(0, 5); // 从0至5按顺序填充到数组中获取数组的长度使用count();获取$num = range(0, 5);echo “该数组长度”.count($letter); // 输出结果为6这里说一下我们一般输出数组用的是print_r();这个方法判断是否为数组可以使用is_array();$a = array(“a”);echo is_array($letter);判断数组是否存在某个值用in_array();$letter = range(“a”, “A”);if (in_array(“B”, $letter)) echo “数组中有b”;else echo “数组中没有b”;遍历数组这里博主推荐使用foreach来遍历较为方便用法：foreach ($数组 as $数组的键 =&gt; $数组的值) {…..}foreach ($letter as $key =&gt; $value) { echo $key.”的值是”.$value;}foreach ($letter as $value) { echo “值为”.$value;}数组的排序方式1.sort rsortsort, rsort是给索引数组的排序$fruit = array(“orange”, “banana”, “apple”);sort($fruit); // 升序rsort($fruit); // 降序2.ksort krsortksort, krsort是依据关联数组的键排序$fruit = array(“b” =&gt; “orange”, “a” =&gt; “banana”, “c” =&gt; “apple”);ksort($fruit); // 升序krsort($fruit); // 降序3.asort arsortasort, arsort是根据关联数组的值排序$fruit = array(“b” =&gt; “orange”, “a” =&gt; “banana”, “c” =&gt; “apple”);asort($fruit); // 升序arsort($fruit); // 降序二维数组$people = array( array(“name” =&gt; “zhangsan” , “sex” =&gt; “man”), array(“name” =&gt; “lisi” , “sex” =&gt; “female”), array(“name” =&gt; “wangwu” , “sex” =&gt; “man”));二维数组的遍历方法foreach ($people as $key =&gt; $newArr) { var_dump($newArr); foreach ($newArr as $key =&gt; $value) { echo $key.”的值是”.$value; }}PHP数组和字符串之间的转换数组转换字符串用implode();转换用法：implode(分隔符，要操作的数组)$arr = array(1, 2, 3, 4 ,5);$str = implode(“”, $arr);echo $str; // 输出为12345字符串转换数组用explode();转换用法：explode(分隔符，要操作的字符串)$str = “a,b,c,d,e”;$arr = explode(“,”, $str);print_r($arr); // 输出Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d [4] =&gt; e )PHP对文件的操作打开文件$fh = fopen(“test.txt”, “a”);a表示操作权限，会在后面讲到，要想对文件进行操作就必须要先打开文件读取文件1.filesize获取文件大小filesize，返回字符串$str = fread($fh, filesize(“test.txt”)); // 可以读取文件的内容2.fgetsfgets，返回字符串，只返回一行，再次运行返回就从下一行开始while ($str = fgets($fh)) { echo $str.”&lt;hr/&gt;“;}3.filefile，返回数组$arr = file(“test.txt”);4.file_get_contentsfile_get_contents获取文件内容，并把内容当成字符串返回出来，也可以用绝对路径打开一个网页$str = file_get_contents(“test.txt”);$str = file_get_contents(“https://www.baidu.com“);文件写入fwrite($fh, “我是写入的内容”);关闭文件fclose($fh);新建文件$fh = fopen(“test2.txt”, “a”);fwrite($fh, “我是新建的”);fclose($fh);新建文件2file_put_contents(“test2.txt”, “我是put进去的”);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PHP基础(一)]]></title>
      <url>%2F2017%2F02%2F20%2FPHP%E5%9F%BA%E7%A1%80(%E4%B8%80)%2F</url>
      <content type="text"><![CDATA[初识PHPPHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。我们有时可以看到以.php作为后缀名的文件，这就是PHP文件，它可以包含文本、HTML、JavaScript代码和PHP代码，且PHP代码在服务器上执行，结果以纯HTML形式返回给浏览器。PHP标记&lt;?php /*所有的php代码就写在这*/ ?&gt; PHP的基本语法1.单行注释包括&nbsp;&nbsp;’//‘,&nbsp;&nbsp;’#’,&nbsp;&nbsp;多行注释’/…/‘2.php必须在指令末尾加上分号3.对大小写敏感PHP的变量变量的规则PHP的变量名由字母、数字、下划线组成变量名也是区分大小写的变量的声明PHP的变量声明符号是$例如:$a = 10;$b = “hello world”;变量的传值$a = 10;$b = $a;echo $a, $b; // $a = 10, $b = 10$b = 20;echo $a, $b; // $a = 10, $b = 20变量的传址$a = 10;$b = &amp;$a;echo $a, $b; // $a = 10, $b = 10$b = 20;echo $a, $b; // $a = 20, $b = 20变量的变量$a = “hello”;$$a = “world”;echo $hello; // 输出world$a = “hello”;$hello = “world”;echo $$a; // 输出也是worldPHP的超全局变量PHP的超全局变量有很多，这里举例说几个:$_SERVER:包含了服务器与执行环境的一些信息var_dump:输出任何类型的数据，以及数据类型和数据长度$_GET:获得通过get方式传送的数据$_POST:获得post方式传输的数据$_REQUEST:既能获得get方式，又能获得post方式$GLOBALS:引用全局作用域中可用的全部变量这里介绍下，$GLOBALS的简单用法$a = 10;$b = 15;echo $GLOBALS[“a”] + $GLOBALS[“b”]; // 输出为25想了解更多的有关PHP超全局变量的可以查询PHP的超全局变量PHP的常量常量的介绍常量是一个一经定义就无法改变的量。常量的定义方法是用define();常量对大小写敏感常量输出时不加$常量的值只能是数值(整形，浮点型)，字符串，以及布尔。// 常量的定义方法:define(常量名, 常量值)define(“PI”, 3.1415926);echo PI; // 输出3.1415926内置常量PHP的内置常量也有很多，这里举例说明几个：PHP_OS:获得当前运行的操作系统PHP_VERSION:显示PHP的版本想了解更多的有关PHP内置常量的可以查询PHP的内置常量魔术常量PHP的魔术常量有很多，这里举例说明几个：__LINE__:显示当前的行数魔术常量会根据位置不同返回不同的值__FILE__:显示文件名__DIR__:显示目录想了解更多的有关PHP魔术常量的可以查询PHP的魔术常量PHP的变量类型PHP变量的类型四种标量数据类型：字符串、布尔、整型、浮点型。两种复杂数据类型：数组和对象。两种特殊数据类型：资源和null。1.整型$num = 10;$num = -10;$num = 075; // 八进制的$num = 0xA1; // 十六进制的$num = 7e10; // 科学计数法2.浮点型(小数)$num = 3.3e-2; // 输出0.03313.布尔型echo true; // 1echo false; // 什么也不输出4.字符串定义字符串有三种包括单引号，双引号，定界符注意：单引号不能解析变量以及字符，而双引号可以$a = “zhangsan”;$str = “hel\nlo $a {$a}bc”;echo $str; // 输出结果为hel lo zhangsan zhangsanbc5.数组$arr = array(1, 3, 4, 5);var_dump($arr); // 注意数组输出用var_dump6.对象对象类型的可以通过类的实例化或者强制转换创建7.资源资源类型的可以通过读取文件之类的操作获得的如:$fh = open(“text.txt”,”w”);8.Null直接赋值为null; 未定义的为空的类型转换(隐式类型转换)$num = 10;$str = “10dsvgnsdnhfv”;echo $num + $str; // “+”只能进行数值运算 输出结果为201.如果想获取这个变量的类型可以使用gettype($变量名)例如:$num = 10;echo gettype($num); // 输出类型是integer2.如果想判断这个变量是否是字符串可以使用is_string($变量名)例如: $str = “hello”;echo gettype($str); // 输出类型是1定界符之heredoc标识符顶格写，标识符独占一行示例: $name = “张三”; $str = &lt;&lt;&lt;EOF 你好，{$name}!EOF; // 注意这里”EOF”要顶格写！ echo $str; // 输出结果为你好，张三！PHP的运算符基本的语法还是与JavaScript大致相同，不过每个变量之前都需要加上”$”的符号。这里就说明几个特殊的:PHP字符串的拼接字符串之间进行拼接用”.”例如:$a = “hello”;$b = “你好”;$sum = $a.$b;echo $sum; // 输出hello你好$a = “hello”;$a.=”world”;echo $a; // $a = $a.”world”; 输出结果为helloworld自增$i = 0;$i++; // 变量使用时，要带上$符PHP的函数自定义函数function show(){ echo “自定义函数”;}show();传参函数实例一:function add($a, $b){ echo $a + $b;}实例二:function defaults($h, $hobby = “打代码”){ echo “我的兴趣是{$play}，一写就是{$h}小时”;}defaults(10, “写代码”);// 注意这里要传参传默认值的参数需要写在最后一位递归函数$a = 10;$b = 15; // 注意在PHP中$a和$b这里是全局变量，在函数内部访问不到function digui(){ // 要调用全局变量$a和$b这里推荐两个方法 echo s[“a”]+$GLOBALS[“b”]; global $a, $b; echo $a + $b;}digui();函数内部的静态变量function fn(){ static $i = 0; // 静态变量 和闭包类似的功能，垃圾不销毁机制 echo $i;$i++;}fn(); // 输出0fn(); // 输出1fn(); // 输出2PHP的表单这里就用实例说明:在一个html文件中写入&lt;body&gt; &lt;a href=&quot;test.php?pid=10&quot;&gt;链接到某某页&lt;/a&gt; &lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;user&quot; value=&quot;&quot; /&gt; 密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; value=&quot;&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt; &lt;/form&gt;&lt;/body&gt;在test.php文件中写入&lt;?php var_dump($_GET); $pid = $_GET[“pid”]; echo $pid;?&gt;这样就可以获取到在html页面中的input框内填入的数据]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript的一些基本知识]]></title>
      <url>%2F2017%2F02%2F20%2FJavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%2F</url>
      <content type="text"><![CDATA[JavaScript中的变量 一、变量的规则 1.首字母必须是英文字母或者下划线2.由英文字母、数字、下划线和$组成3.不能与JavaScript关键词和保留字重名4.最好以驼峰命名法，第一个单词首字母小写，其它单词首字母大写二、变量的声明方法var 变量名例如：var a = 10;&nbsp;&nbsp;(变量名a是不分类型的，但是a里面存储的值是分类型的)如果想获取变量a的值的类型可以是用”typeof”。如：console.log(typeof a) 打印一下a的值的种类三、变量的转换方式1.显示转换1.String(); 可以把括号内的值转化为字符串类型2.Number(); 可以把括号内的值转化为数值类型，如果是字符串，字符串的内容必须是整数或者小数，不能有其他字符3.parseInt(); 转数值类型，可以理解为是取整操作，可以有其他字符，转化的时候其它字符以后的内容不转化。2.隐示转换隐士转换是什么意思呢?就是计算机自己帮我们做的类型转换。比如： 1 + “2” 会出现什么结果呢?计算机会认为+是一个取正操作符，运算符重载。把1转化成”1”然后和2进行拼接。所以结果是12四、变量的作用域不管全局变量还是局部变量，尽量都不要重名。1.全局变量 在函数外部声明的可以称之为是全局变量，在任何地方都可以使用。2.局部变量 局部变量值，在函数内声明的变量，只能在函数内部使用。博主自己整理的一些JavaScript中变量的知识 五、变量的数据类型1.基本数据类型numberstringboolundefinednull2.复杂数据类型object JavaScript中的运算符 一、大小关系基本的&nbsp;&nbsp;”&gt;,&lt;,=,&gt;=,&lt;=”&nbsp;&nbsp;博主就不在此多说了，相信各位对代码感兴趣的同学都懂~在js中”==”则是比较两个运算数的返回值是否相等，”!=”则是返回值不相等而”===”则是比较两个运算数的返回值和数据的类型是否都相等。“!==”则是返回值和数据的类型都不相等。二、算数运算符同样正常的&nbsp;&nbsp;”+ - * / %”&nbsp;&nbsp;也不用多说了。这里要提两点： 1.”+”号不仅有求和的运算，还能够进行字符串拼接，如之前说的可以帮我们进行隐示转换。2.”-“号也不仅只有减法运算，还能够对操作的数值进行取反作用。 三、自增和自减i++/i--加或减在变量之前，就先计算出变量的值，再进行其他操作。加或减在变量之后，就先进行下面操作，再对变量进行求值。 四、逻辑运算符1.逻辑与(&amp;&amp;)当条件有2个的时候会用到逻辑运算符，如果两个条件都为true则返回true。1.短路与逻辑与需要多个条件都为真的时候整个表达式才是真，所以当前面的条件为假的时候，就不会去执行后面的判断条件。3.逻辑或(||)用逻辑或连接的两个bool值，只要有一个为真，整个表达式就为真，两个bool都为假的时候，整个表达式为假。4.短路或需要多个条件有一个为真的时候整个表达式就是真，所以当前面的条件为真的时候，就不会去执行后面的判断条件。5.逻辑非(!)如果条件返回值是true则返回false，如果是false则返回true。 五、三元表达式格式为：条件 ? 结果1 : 结果2例如：5 &gt; 4 ? true : false因为5大于4这个结果是真的所以显示为true。博主自己整理的一些JavaScript中变量运算符的知识]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[个人收集的前端相关的网站]]></title>
      <url>%2F2017%2F02%2F18%2F%E4%B8%AA%E4%BA%BA%E6%94%B6%E9%9B%86%E7%9A%84%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BD%91%E7%AB%99%2F</url>
      <content type="text"><![CDATA[学习类w3schoolw3cmark前端笔记快课网知识库 - CSDN无线Web开发经验谈极客标签往期回顾码农周刊慕课网Div.IOw3cplus_引领web前沿，打造前端精品教程JavaScript | MDNcanvas动画包教不包会网易云课堂绿叶学习网前端收费视频课程分享 | ByZhkc3PHP: PHP 手册 - Manual介绍 - vue.js微信小程序接入指南csssecrets jQuery类jQuery之家jQuery插件库jQuery API 3.1 中文文档 社区论坛博客类Lymoo’s blog微信小程序联盟CSDN.NET博客园廖雪峰掘金阮一峰张鑫旭十年踪迹王福朋彬Go前端人的俱乐部WEB前端开发囧克斯前端开发博客大漠穷秋Taobao FED腾讯小楼昨夜又秋风 - 知乎专栏知乎 前端综合类广场 - 看云前端导航黑客新闻InfoQ中文站Aotu.io「凹凸实验室」Top Pens of 2013 on CodePenHTML5资源教程html5前端开发技术分享网前端网（QDFuns）CSS Gradients with background-blend-modeCSS魔法 - 弧形排列的可折叠二级导航编程之家踏得网晚晴幽草轩 前端工具类Swiper中文网图片压缩日期控件与时间插件mac svn客户端墨刀JavaScript正则在线测试工具CSS3的测试你的浏览器支持 ES6 吗？ - ES-CheckerASCII码对照表史蒂芬周的博客Avocode - PSD Node类七天学会NodeJSCNode技术社区 面试题类前端开发面试题小集前端工作面试问题小集我是如何同时拿到阿里和腾讯offer的 - Web开发手记 - SegmentFault前端面试经典题目合集_牛客网web前端面试题目-朝圣言BAT及各大互联网公司2014前端笔试面试题–JavaScript篇 - ChokCoco前端面试题 - kongjiea笔记 - 博客频道]]></content>
    </entry>

    
  
  
</search>
